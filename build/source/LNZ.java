/* autogenerated by Processing revision 1281 on 2022-03-06 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.awt.event.KeyEvent;
import processing.javafx.*;
import ddf.minim.*;
import ddf.minim.ugens.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class LNZ extends PApplet {









Global global;

 public void setup() {
  /* size commented out by preprocessor */;
  surface.setSize(Constants.initialInterface_size, Constants.initialInterface_size);
  surface.setLocation(PApplet.parseInt(0.5f * (displayWidth - Constants.initialInterface_size)),
    PApplet.parseInt(0.5f * (displayHeight - Constants.initialInterface_size)));
  frameRate(Constants.maxFPS);
  global = new Global(this);
  background(global.color_background);
  global.menu = new InitialInterface();
}

 public void draw() {
  int timeElapsed = global.frame();
  // FPS counter
  global.timer_FPS -= timeElapsed;
  if (global.timer_FPS < 0) {
    global.timer_FPS = Constants.frameUpdateTime;
    global.lastFPS = (Constants.frameAverageCache * global.lastFPS + PApplet.parseFloat(frameCount - global.frameCounter) *
      (1000.0f / Constants.frameUpdateTime)) / (Constants.frameAverageCache + 1);
    global.frameCounter = frameCount + 1;
    //println(int(global.lastFPS) + " FPS");
  }
  // Program
  if (global.menu != null) {
    global.menu.LNZ_update(millis());
  }
  switch(global.state) {
    case INITIAL_INTERFACE:
      break;
    case ENTERING_MAINMENU:
      global.state = ProgramState.MAINMENU_INTERFACE;
      global.menu = new MainMenuInterface();
      break;
    case MAINMENU_INTERFACE:
      break;
    case EXITING:
      global.timer_exiting -= timeElapsed;
      if (global.timer_exiting < 0) {
        exit();
      }
      break;
    default:
      break;
  }
}

 public void mouseDragged() {
  if (global.menu != null) {
    global.menu.LNZ_mouseMove(mouseX, mouseY);
  }
}
 public void mouseMoved() {
  if (global.menu != null) {
    global.menu.LNZ_mouseMove(mouseX, mouseY);
  }
}

 public void mousePressed() {
  if (global.menu != null) {
    global.menu.LNZ_mousePress();
  }
}

 public void mouseReleased() {
  if (global.menu != null) {
    global.menu.LNZ_mouseRelease();
  }
}

 public void mouseWheel(MouseEvent e) {
  if (global.menu != null) {
    global.menu.LNZ_scroll(e.getCount());
  }
}

 public void keyPressed() {
  if (global.menu != null) {
    global.menu.LNZ_keyPress();
  }
  // Prevent sketch from exiting on ESC
  if (key == ESC) {
    //key = 0;
  }
}

 public void keyReleased() {
  if (global.menu != null) {
    global.menu.LNZ_keyRelease();
  }
}
static class Constants {

  // Program constants
  static final String credits =
  "Liberal Nazi Zombies" +
  "\nCreated by Daniel Gray" +
  "\n20220306: v0.6.1n" +
  "\nLines: 3040 (v0.6.1)" +
  "";
  static final String version_history =
  "Liberal Nazi Zombies" +
  "\nCreated by Daniel Gray" +
  "\n???: v0.7: Recovery Version" +
  "\n20220228: v0.6: Advanced Mechanics" +
  "\n202202: v0.5: Recreate Logic" +
  "\n202201: v0.4: Recreate Program" +
  "\n2019: v0.3: Legacy Version" +
  "";
  static final int frameUpdateTime = 100;
  static final int frameAverageCache = 5;
  static final int maxFPS = 120;
  static final int exit_delay = 300;

  // Initial Interface
  static final int initialInterface_size = 400;
  static final int initialInterface_buttonWidth = 80;
  static final int initialInterface_buttonGap = 25;

  // MainMenu Interface
  static final float newProfileForm_width = 400;
  static final float newProfileForm_height = 500;
  static final float OptionsForm_widthOffset = 300;
  static final float OptionsForm_heightOffset = 100;
  static final float AchievementsForm_widthOffset = 300;
  static final float AchievementsForm_heightOffset = 100;
}
class DImg {

  PImage img = null;
  int imgMode = CORNERS;
  int gridX = 0;
  int gridY = 0;

  // Constructor for blank image
  DImg(int x, int y) {
    this.img = createImage(x, y, ARGB);
  }
  DImg(PImage img) {
    this.img = img;
  }

   public void mode(int imgMode) {
    switch(imgMode) {
      case CORNERS:
      case CORNER:
      case CENTER:
        this.imgMode = imgMode;
        break;
      default:
        print("ERROR: imgMode invalid");
        break;
    }
  }

   public void setGrid(int x, int y) {
    this.gridX = x;
    this.gridY = y;
  }

  // Display functions
   public void display(float x, float y) {
    imageMode(this.imgMode);
    image(this.img, x, y);
  }
   public void display(float xi, float yi, float xf, float yf) {
    imageMode(this.imgMode);
    image(this.img, xi, yi, xf, yf);
  }

  // Return part of an image
   public PImage getImageSection(PImage img, int x, int y, int w, int h) {
    return img.get(x, y, w, h);
  }

  // Add image to part of this using width / height
   public void addImage(PImage newImg, int x, int y, int w, int h) {
   this.img.copy(newImg, 0, 0, newImg.width, newImg.height, x, y, w, h);
  }
  // Add image to part of this using percent of width / height
   public void addImagePercent(PImage newImg, float xP, float yP, float wP, float hP) {
    if (xP < 0.0f || yP < 0.0f || wP < 0.0f || hP < 0.0f || xP > 1.0f || yP > 1.0f || wP > 1.0f || hP > 1.0f) {
      println("ERROR: addImagePercent coordinates out of range");
      return;
    }
    this.img.copy(newImg, 0, 0, newImg.width, newImg.height,
      round(this.img.width * xP), round(this.img.height * yP),
      round(this.img.width * wP), round(this.img.height * hP));
  }
  // Add image to grid square
   public void addImageGrid(PImage newImg, int x, int y) {
    if (x < 0 || y < 0 || x >= this.gridX || y >= this.gridY) {
      println("ERROR: addImageGrid coordinate out of range");
      return;
    }
    this.img.copy(newImg, 0, 0, newImg.width, newImg.height,
      round(this.img.width * (PApplet.parseFloat(x) / this.gridX)),
      round(this.img.height * (PApplet.parseFloat(y) / this.gridY)),
      this.img.width / this.gridX, this.img.height / this.gridY);
  }
   public void addImageGrid(PImage newImg, int x, int y, int w, int h) {
    if (x < 0 || y < 0 || x >= this.gridX || y >= this.gridY) {
      println("ERROR: addImageGrid coordinate out of range");
      return;
    }
    if (w < 1 || h < 1 || x + w >= this.gridX || y + h >= this.gridY) {
      print("ERROR: addImageGrid coordinate our of range");
      return;
    }
    this.img.copy(newImg, 0, 0, newImg.width, newImg.height,
      round(this.img.width * (PApplet.parseFloat(x) / this.gridX)),
      round(this.img.height * (PApplet.parseFloat(y) / this.gridY)),
      w * (this.img.width / this.gridX), h * (this.img.height / this.gridY));
  }

  // convolution
   public void convolution(float[][] matrix) {
    if (matrix.length % 2 != 1 || matrix[0].length % 2 != 1) {
      println("ERROR: convolution matrix invalid size.");
      return;
    }
    this.img.loadPixels();
    for (int i = 0; i < this.img.height; i++) {
      for (int j = 0; j < this.img.width; j++) {
        int index = i * this.img.width + j;
        float r_total = 0;
        float g_total = 0;
        float b_total = 0;
        for (int i_offset = 0; i_offset < matrix[0].length; i_offset++) {
          for (int j_offset = 0; j_offset < matrix.length; j_offset++) {
            int i_corrected = constrain(i + i_offset - matrix[0].length / 2, 0, this.img.height);
            int j_corrected = constrain(j + j_offset - matrix.length / 2, 0, this.img.width);
            int index_offset = constrain(i_corrected * this.img.width + j_corrected, 0, this.img.pixels.length - 1);
            float factor = matrix[i_offset][j_offset];
            r_total += factor * (this.img.pixels[index_offset] >> 16 & 0xFF);
            g_total += factor * (this.img.pixels[index_offset] >> 8 & 0xFF);
            b_total += factor * (this.img.pixels[index_offset] & 0xFF);
          }
        }
        r_total = constrain(r_total, 0, 255);
        g_total = constrain(g_total, 0, 255);
        b_total = constrain(b_total, 0, 255);
        this.img.pixels[index] = color(r_total, g_total, b_total);
      }
    }
    this.img.updatePixels();
  }
   public void blur() {
    this.convolution(new float[][]{{1.0f/9, 1.0f/9, 1.0f/9}, {1.0f/9, 1.0f/9, 1.0f/9}, {1.0f/9, 1.0f/9, 1.0f/9}});
  }
   public void sharpen() {
    this.convolution(new float[][]{{-1, -1, -1}, {-1, 9, -1}, {-1, -1, -1}});
  }

  // Brighten
   public void brighten(float factor) {
    this.img.loadPixels();
    for (int i = 0; i < this.img.height; i++) {
      for (int j = 0; j < this.img.width; j++) {
        int index = i * this.img.width + j;
        if (index == 0) {
          continue;
        }
        int c = this.img.pixels[index];
        float r = constrain((c >> 16 & 0xFF) * factor, 0, 255);
        float g = constrain((c >> 8 & 0xFF) * factor, 0, 255);
        float b = constrain((c & 0xFF) * factor, 0, 255);
        float a = alpha(c);
        this.img.pixels[index] = color(r, g, b, a);
      }
    }
    this.img.updatePixels();
  }

   public void brightenGradient(float factor, float gradientDistance, float x, float y) {
    this.img.loadPixels();
    for (int i = 0; i < this.img.height; i++) {
      for (int j = 0; j < this.img.width; j++) {
        int index = i * this.img.width + j;
        float distance = sqrt((i - y) * (i - y) + (j - x) * (j - x));
        float curr_factor = factor;
        if (distance < gradientDistance) {
          curr_factor = 1 + (factor - 1) * distance / gradientDistance;
        }
        int c = this.img.pixels[index];
        float r = constrain((c >> 16 & 0xFF) * curr_factor, 0, 255);
        float g = constrain((c >> 8 & 0xFF) * curr_factor, 0, 255);
        float b = constrain((c & 0xFF) * curr_factor, 0, 255);
        int col = ccolor(PApplet.parseInt(r), PApplet.parseInt(g), PApplet.parseInt(b), 254);
        this.img.pixels[index] = col;
      }
    }
    this.img.updatePixels();
  }

  // transparent
   public void makeTransparent() {
    this.makeTransparent(0);
  }
   public void makeTransparent(int alpha) {
    this.img.loadPixels();
    for (int i = 0; i < this.img.height; i++) {
      for (int j = 0; j < this.img.width; j++) {
        int index = i * this.img.width + j;
        if (index == 0) {
          continue;
        }
        float r = this.img.pixels[index] >> 16 & 0xFF;
        float g = this.img.pixels[index] >> 8 & 0xFF;
        float b = this.img.pixels[index] & 0xFF;
        this.img.pixels[index] = ccolor(PApplet.parseInt(r), PApplet.parseInt(g), PApplet.parseInt(b), alpha);
      }
    }
    this.img.updatePixels();
  }
   public void transparencyGradientFromPoint(float x, float y, float distance) {
    this.img.loadPixels();
    for (int i = 0; i < this.img.height; i++) {
      for (int j = 0; j < this.img.width; j++) {
        int index = i * this.img.width + j;
        if (index == 0) {
          continue;
        }
        float r = this.img.pixels[index] >> 16 & 0xFF;
        float g = this.img.pixels[index] >> 8 & 0xFF;
        float b = this.img.pixels[index] & 0xFF;
        float curr_distance = sqrt((i - y) * (i - y) + (j - x) * (j - x));
        float alpha = 0;
        if (curr_distance < distance) {
          alpha = 255 * (1 - curr_distance / distance);
        }
        this.img.pixels[index] = color(r, g, b, alpha);
      }
    }
    this.img.updatePixels();
  }

  // color pixels
   public void colorPixels(int c) {
    /*float ref_r = c >> 16 & 0xFF;
    float ref_g = c >> 8 & 0xFF;
    float ref_b = c & 0xFF;
    float ref_a = alpha(c);*/
    this.img.loadPixels();
    for (int i = 0; i < this.img.height; i++) {
      for (int j = 0; j < this.img.width; j++) {
        int index = i * this.img.width + j;
        if (index == 0) {
          continue;
        }
        this.img.pixels[index] = c; //color(ref_r, ref_g, ref_b, ref_a);
      }
    }
    this.img.updatePixels();
  }

   public void colorPixel(int x, int y, int c) {
    this.img.loadPixels();
    int index = x + y * this.img.width;
    if (index < 1 || index >= this.img.pixels.length) {
      return;
    }
    this.img.pixels[index] = c;
    this.img.updatePixels();
  }
}
abstract class Button {
  // state
  protected boolean hidden = false;
  protected boolean disabled = false;
  protected boolean hovered = false;
  protected boolean clicked = false;
  // colors
  protected int color_disabled = color(220, 180);
  protected int color_default = color(220);
  protected int color_hover = color(170);
  protected int color_click = color(120);
  protected int color_text = color(0);
  protected int color_stroke = color(0);
  // config
  protected String message = "";
  protected boolean show_message = false;
  protected float text_size = 14;
  protected boolean show_stroke = true;
  protected float stroke_weight = 0.5f;
  protected boolean stay_dehovered = false;
  protected boolean adjust_for_text_descent = false;
  // timer
  protected int hold_timer = 0;
  protected int lastUpdateTime = millis();

  Button() {
  }

   public void setColors(int c_dis, int c_def, int c_hov, int c_cli, int c_tex) {
    this.color_disabled = c_dis;
    this.color_default = c_def;
    this.color_hover = c_hov;
    this.color_click = c_cli;
    this.color_text = c_tex;
  }

   public void setStroke(int c_str, float stroke_weight) {
    this.color_stroke = c_str;
    this.stroke_weight = stroke_weight;
    this.show_stroke = true;
  }
   public void noStroke() {
    this.show_stroke = false;
  }

   public int fillColor() {
    if (this.disabled) {
      return this.color_disabled;
    }
    else if (this.clicked) {
      return this.color_click;
    }
    else if (this.hovered) {
      return this.color_hover;
    }
    else {
      return this.color_default;
    }
  }

   public void setFill() {
    fill(this.fillColor());
    if (this.show_stroke) {
      stroke(this.color_stroke);
      strokeWeight(this.stroke_weight);
    }
    else {
      strokeWeight(0.0001f);
      noStroke();
    }
  }

   public void writeText() {
    if (this.show_message) {
      fill(this.color_text);
      textAlign(CENTER, CENTER);
      textSize(this.text_size);
      if (this.adjust_for_text_descent) {
        text(this.message, this.xCenter(), this.yCenter() - textDescent());
      }
      else {
        text(this.message, this.xCenter(), this.yCenter());
      }
    }
  }


   public void stayDehovered() {
    this.stay_dehovered = true;
    this.hovered = false;
  }

   public void update(int millis) {
    if (!this.hidden) {
      drawButton();
      if (this.clicked) {
        this.hold_timer += millis - this.lastUpdateTime;
      }
    }
    this.lastUpdateTime = millis;
  }

   public void mouseMove(float mX, float mY) {
    if (this.disabled) {
      return;
    }
    boolean prev_hover = this.hovered;
    this.hovered = this.mouseOn(mX, mY);
    if (this.stay_dehovered) {
      if (this.hovered) {
        this.hovered = false;
      }
      else {
        this.stay_dehovered = false;
      }
    }
    if (prev_hover && !this.hovered) {
      this.dehover();
    }
    else if (!prev_hover && this.hovered) {
      this.hover();
    }
  }

   public void mousePress() {
    if (this.disabled) {
      return;
    }
    if (mouseButton != LEFT) {
      return;
    }
    if (this.hovered) {
      this.clicked = true;
      this.click();
    }
    else {
      this.clicked = false;
    }
  }

   public void mouseRelease() {
    if (this.disabled) {
      return;
    }
    if (mouseButton != LEFT) {
      return;
    }
    if (this.clicked) {
      this.clicked = false;
      this.hold_timer = 0;
      this.release();
    }
    this.clicked = false;
  }

   public abstract float xCenter();
   public abstract float yCenter();
   public abstract float button_width();
   public abstract float button_height();
   public abstract void drawButton();
   public abstract void moveButton(float xMove, float yMove);
   public abstract boolean mouseOn(float mX, float mY);
   public abstract void hover();
   public abstract void dehover();
   public abstract void click();
   public abstract void release();
}



abstract class RectangleButton extends Button {
  protected float xi;
  protected float yi;
  protected float xf;
  protected float yf;
  protected int roundness = 8;
  protected float xCenter;
  protected float yCenter;
  protected boolean raised_border = false;
  protected boolean raised_body = false;
  protected boolean shadow = false;
  protected float shadow_amount = 5;

  RectangleButton(float xi, float yi, float xf, float yf) {
    super();
    this.setLocation(xi, yi, xf, yf);
  }

   public float xCenter() {
    return this.xCenter;
  }

   public float yCenter() {
    return this.yCenter;
  }

   public float button_width() {
    return this.xf - this.xi;
  }

   public float button_height() {
    return this.yf - this.yi;
  }

   public void drawButton() {
    rectMode(CORNERS);
    if (this.shadow) {
      fill(0, 180);
      rect(this.xi + this.shadow_amount, this.yi + this.shadow_amount,
        this.xf + this.shadow_amount, this.yf + this.shadow_amount, this.roundness);
    }
    this.setFill();
    if (this.shadow && this.clicked) {
      translate(this.shadow_amount, this.shadow_amount);
    }
    if (this.raised_body) {
      fill(255, 0);
      rect(this.xi, this.yi, this.xf, this.yf, this.roundness);
      stroke(255, 0);
      if (this.clicked) {
        fill(darken(this.fillColor()));
        rect(this.xi, this.yi, this.xf, this.yCenter());
        fill(brighten(this.fillColor()));
        rect(this.xi, this.yCenter(), this.xf, this.yf);
      }
      else {
        fill(brighten(this.fillColor()));
        rect(this.xi, this.yi, this.xf, this.yCenter(), this.roundness);
        fill(darken(this.fillColor()));
        rect(this.xi, this.yCenter(), this.xf, this.yf, this.roundness);
      }
    }
    else {
      rect(this.xi, this.yi, this.xf, this.yf, this.roundness);
    }
    this.writeText();
    if (this.shadow && this.clicked) {
      translate(-this.shadow_amount, -this.shadow_amount);
    }
    if (this.raised_border) {
      strokeWeight(1);
      if (this.clicked) {
        stroke(0);
        line(this.xi, this.yi, this.xf, this.yi);
        line(this.xi, this.yi, this.xi, this.yf);
        stroke(255);
        line(this.xf, this.yf, this.xf, this.yi);
        line(this.xf, this.yf, this.xi, this.yf);
      }
      else {
        stroke(255);
        line(this.xi, this.yi, this.xf, this.yi);
        line(this.xi, this.yi, this.xi, this.yf);
        stroke(0);
        line(this.xf, this.yf, this.xf, this.yi);
        line(this.xf, this.yf, this.xi, this.yf);
      }
    }
  }

   public void setLocation(float xi, float yi, float xf, float yf) {
    this.xi = xi;
    this.yi = yi;
    this.xf = xf;
    this.yf = yf;
    this.xCenter = this.xi + 0.5f * (this.xf - this.xi);
    this.yCenter = this.yi + 0.5f * (this.yf - this.yi);
  }

   public void moveButton(float xMove, float yMove) {
    this.xi += xMove;
    this.yi += yMove;
    this.xf += xMove;
    this.yf += yMove;
    this.xCenter = this.xi + 0.5f * (this.xf - this.xi);
    this.yCenter = this.yi + 0.5f * (this.yf - this.yi);
  }

   public void stretchButton(float amount, int direction) {
    switch(direction) {
      case UP:
        this.setLocation(this.xi, this.yi - amount, this.xf, this.yf);
        break;
      case DOWN:
        this.setLocation(this.xi, this.yi, this.xf, this.yf + amount);
        break;
      case LEFT:
        this.setLocation(this.xi - amount, this.yi, this.xf, this.yf);
        break;
      case RIGHT:
        this.setLocation(this.xi, this.yi, this.xf + amount, this.yf);
        break;
      default:
        break;
    }
  }

   public boolean mouseOn(float mX, float mY) {
    if (mX >= this.xi && mY >= this.yi &&
      mX <= this.xf && mY <= this.yf) {
      return true;
    }
    return false;
  }
}


abstract class CheckBox extends RectangleButton {
  protected boolean checked = false;
  protected int color_check = color(0);
  protected float offset = 0;

  CheckBox(float xi, float yi, float size) {
    this(xi, yi, xi + size, xi + size);
  }
  CheckBox(float xi, float yi, float xf, float yf) {
    super(xi, yi, xf, yf);
    this.setColors(color(170, 170), color(170, 0), color(170, 50), color(170, 120), color(0));
    this.roundness = 0;
    this.stroke_weight = 2;
  }

  @Override public 
  void setLocation(float xi, float yi, float xf, float yf) {
    super.setLocation(xi, yi, xf, yf);
    this.offset = 0.1f * (xf  - xi);
  }

  @Override public 
  void drawButton() {
    super.drawButton();
    if (this.checked) {
      strokeWeight(this.stroke_weight);
      stroke(this.color_stroke);
      line(this.xi + offset, this.yi + offset, this.xf - offset, this.yf - offset);
      line(this.xi + offset, this.yf - offset, this.xf - offset, this.yi + offset);
    }
  }

   public void click() {
    this.checked = !this.checked;
  }
}


abstract class ImageButton extends RectangleButton {
  protected PImage img;
  protected int color_tint = color(255);

  ImageButton(PImage img, float xi, float yi, float xf, float yf) {
    super(xi, yi, xf, yf);
    this.img = img;
  }

  @Override public 
  void drawButton() {
    tint(this.color_tint);
    imageMode(CORNERS);
    image(this.img, this.xi, this.yi, this.xf, this.yf);
    noTint();
    this.writeText();
  }
}


abstract class RippleRectangleButton extends ImageButton {
  class Pixel {
    private int x;
    private int y;
    private float x_pixel;
    private float y_pixel;
    Pixel(int x, int y, float x_pixel, float y_pixel) {
      this.x = x;
      this.y = y;
      this.x_pixel = x_pixel;
      this.y_pixel = y_pixel;
    }
     public float distance(float mX, float mY) {
      return sqrt((mX - this.x_pixel) * (mX - this.x_pixel) +
        (mY - this.y_pixel) * (mY - this.y_pixel));
    }
  }

  protected int rippleTime = 250;
  protected int rippleTimer = 0;
  protected int number_buckets = 50;
  protected HashMap<Integer, ArrayList<Pixel>> buckets;
  protected float clickX = 0;
  protected float clickY = 0;
  protected float maxRippleDistance;

  RippleRectangleButton(float xi, float yi, float xf, float yf) {
    super(createImage(PApplet.parseInt(xf - xi), PApplet.parseInt(yf - yi), ARGB), xi, yi, xf, yf);
    this.refreshColor();
    this.maxRippleDistance = max(this.button_width(), this.button_height());
  }

  @Override public 
  void update(int millis) {
    int timeElapsed = millis - this.lastUpdateTime;
    super.update(millis);
    if (this.rippleTimer > 0) {
      this.rippleTimer -= timeElapsed;
      if (this.rippleTimer <= 0) {
        this.refreshColor();
      }
      else {
        this.colorPixels();
      }
    }
  }

   public void refreshColor() {
    DImg dimg = new DImg(this.img);
    dimg.colorPixels(this.fillColor());
    this.img = dimg.img;
    this.rippleTimer = 0;
  }

   public void initializeRipple() {
    this.buckets = new HashMap<Integer, ArrayList<Pixel>>();
    for (int i = 0; i < this.number_buckets; i++) {
      this.buckets.put(i, new ArrayList<Pixel>());
    }
    float keyMultiplier = PApplet.parseFloat(this.rippleTime) / this.number_buckets;
    for (int i = 0; i < this.img.height; i++) {
      for (int j = 0; j < this.img.width; j++) {
        float x = this.xi + this.button_width() * j / this.img.width;
        float y = this.yi + this.button_height() * i / this.img.height;
        Pixel p = new Pixel(j, i, x, y);
        float distance = p.distance(this.clickX, this.clickY);
        int timer = PApplet.parseInt(floor(this.rippleTime * (1 - distance / this.maxRippleDistance) / keyMultiplier));
        if (this.buckets.containsKey(timer)) {
          this.buckets.get(timer).add(p);
        }
      }
    }
    this.rippleTimer = this.rippleTime;
  }

   public void colorPixels() {
    DImg dimg = new DImg(this.img);
    float currDistance = this.maxRippleDistance * (this.rippleTime - this.rippleTimer) / this.rippleTime;
    float keyMultiplier = PApplet.parseFloat(this.rippleTime) / this.number_buckets;
    for (Map.Entry<Integer, ArrayList<Pixel>> entry : this.buckets.entrySet()) {
      if (entry.getKey() * keyMultiplier > this.rippleTimer) {
        for (Pixel p : entry.getValue()) {
          dimg.colorPixel(p.x, p.y, this.color_click);
        }
        entry.getValue().clear();
      }
    }
  }

   public void hover() {
    this.refreshColor();
  }

   public void dehover() {
    this.refreshColor();
  }

   public void click() {
    this.clickX = mouseX;
    this.clickY = mouseY;
    this.initializeRipple();
  }

   public void release() {
    this.refreshColor();
  }
}




abstract class EllipseButton extends Button {
  protected float xc;
  protected float yc;
  protected float xr;
  protected float yr;

  EllipseButton(float xc, float yc, float xr, float yr) {
    super();
    this.xc = xc;
    this.yc = yc;
    this.xr = xr;
    this.yr = yr;
  }

   public float xCenter() {
    return this.xc;
  }

   public float yCenter() {
    return this.yc;
  }

   public float button_width() {
    return 2 * this.xr;
  }

   public float button_height() {
    return 2 * this.yr;
  }

   public void drawButton() {
    this.setFill();
    ellipseMode(RADIUS);
    ellipse(this.xc, this.yc, this.xr, this.yr);
    this.writeText();
  }

   public void setLocation(float xc, float yc, float xr, float yr) {
    this.xc = xc;
    this.yc = yc;
    this.xr = xr;
    this.yr = yr;
  }

   public void moveButton(float xMove, float yMove) {
    this.xc += xMove;
    this.yc += yMove;
  }

   public boolean mouseOn(float mX, float mY) {
    if (this.xr == 0 || this.yr == 0) {
      return false;
    }
    float xRatio = (mX - this.xc) / this.xr;
    float yRatio = (mY - this.yc) / this.yr;
    if (xRatio * xRatio + yRatio * yRatio <= 1) {
      return true;
    }
    return false;
  }
}



abstract class CircleButton extends EllipseButton {
  CircleButton(float xc, float yc, float r) {
    super(xc, yc, r, r);
  }
   public float radius() {
    return this.xr;
  }

   public void setLocation(float xc, float yc, float radius) {
    super.setLocation(xc, yc, radius, radius);
  }
}



abstract class RadioButton extends CircleButton {
  protected boolean checked = false;
  protected int color_active = color(0);

  RadioButton(float xc, float yc, float r) {
    super(xc, yc, r);
    this.setColors(color(170, 120), color(170, 0), color(170, 40), color(170, 80), color(0));
  }

  @Override public 
  void drawButton() {
    super.drawButton();
    if (this.checked) {
      fill(this.color_active);
      ellipseMode(RADIUS);
      circle(this.xCenter(), this.yCenter(), 0.6f * this.radius());
    }
    if (this.clicked) {
      fill(this.color_active, 135);
      ellipseMode(RADIUS);
      circle(this.xCenter(), this.yCenter(), 1.4f * this.radius());
    }
  }

   public void click() {
    this.checked = !this.checked;
  }
}



abstract class TriangleButton extends Button {
  protected float x1;
  protected float y1;
  protected float x2;
  protected float y2;
  protected float x3;
  protected float y3;
  protected float dotvv;
  protected float dotuu;
  protected float dotvu;
  protected float constant;
  protected float xCenter;
  protected float yCenter;

  TriangleButton(float x1, float y1, float x2, float y2, float x3, float y3) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    this.x3 = x3;
    this.y3 = y3;
    this.dotvv = (x3 - x1) * (x3 - x1) + (y3 - y1) * (y3 - y1);
    this.dotuu = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
    this.dotvu = (x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1);
    this.constant = this.dotvv * this.dotuu - this.dotvu * this.dotvu;
    this.xCenter = (x1 + x2 + x3) / 3.0f;
    this.yCenter = (y1 + y2 + y3) / 3.0f;
  }

   public float xCenter() {
    return this.xCenter;
  }

   public float yCenter() {
    return this.yCenter;
  }

   public void drawButton() {
    this.setFill();
    triangle(this.x1, this.y1, this.x2, this.y2, this.x3, this.y3);
    this.writeText();
  }

   public void moveButton(float xMove, float yMove) {
    this.x1 += xMove;
    this.y1 += yMove;
    this.x2 += xMove;
    this.y2 += yMove;
    this.x3 += xMove;
    this.y3 += yMove;
  }

   public boolean mouseOn(float mX, float mY) {
    float dotvp = (this.x3 - this.x1) * (mX - this.x1) + (this.y3 - this.y1) * (mY - this.y1);
    float dotup = (this.x2 - this.y1) * (mX - this.x1) + (this.y2 - this.y1) * (mY - this.y1);
    if (this.constant == 0) {
      return false;
    }
    float t1 = (this.dotuu * dotvp - this.dotvu * dotup) / this.constant;
    float t2 = (this.dotvv * dotup - this.dotvu * dotvp) / this.constant;
    if (t1 >= 0 && t2 >= 0 && t1 + t2 < 1) {
      return true;
    }
    return false;
  }
}






class ScrollBar {
  abstract class ScrollBarButton extends RectangleButton {
    protected int time_hold = 350;
    protected int time_click = 80;
    protected boolean held = false;

    ScrollBarButton(float xi, float yi, float xf, float yf) {
      super(xi, yi, xf, yf);
      this.roundness = 0;
    }

    @Override public 
    void update(int millis) {
      super.update(millis);
      if (this.clicked) {
        if (this.held) {
          if (this.hold_timer > this.time_click) {
            this.hold_timer -= this.time_click;
            this.click();
          }
        }
        else {
          if (this.hold_timer > this.time_hold) {
            this.hold_timer -= this.time_hold;
            this.held = true;
            this.click();
          }
        }
      }
    }

     public void hover() {
    }
     public void dehover() {
    }
     public void release() {
      this.held = false;
    }
  }

  class ScrollBarUpButton extends ScrollBarButton {
    float arrowWidth = 0;
    float arrowRatio = 0.1f;
    float cushionRatio = 1.5f;
    ScrollBarUpButton(float xi, float yi, float xf, float yf) {
      super(xi, yi, xf, yf);
      refreshArrowWidth();
      this.raised_border = true;
    }
    @Override public 
    void setLocation(float xi, float yi, float xf, float yf) {
      super.setLocation(xi, yi, xf, yf);
      this.refreshArrowWidth();
    }
     public void refreshArrowWidth() {
      if (ScrollBar.this.vertical) {
        this.arrowWidth = this.arrowRatio * this.button_height();
      }
      else {
        this.arrowWidth = this.arrowRatio * this.button_width();
      }
    }
    @Override public 
    void drawButton() {
      super.drawButton();
      stroke(0);
      strokeWeight(this.arrowWidth);
      if (ScrollBar.this.vertical) {
        line(this.xi + this.cushionRatio * this.arrowWidth, this.yf - this.cushionRatio * this.arrowWidth,
          this.xCenter(), this.yi + this.cushionRatio * this.arrowWidth);
        line(this.xf - this.cushionRatio * this.arrowWidth, this.yf - this.cushionRatio * this.arrowWidth,
          this.xCenter(), this.yi + this.cushionRatio * this.arrowWidth);
      }
      else {
        line(this.xf - this.cushionRatio * this.arrowWidth, this.yi + this.cushionRatio * this.arrowWidth,
          this.xi + this.cushionRatio * this.arrowWidth, this.yCenter());
        line(this.xf - this.cushionRatio * this.arrowWidth, this.yf - this.cushionRatio * this.arrowWidth,
          this.xi + this.cushionRatio * this.arrowWidth, this.yCenter());
      }
    }
    @Override public 
    void dehover() {
      this.clicked = false;
    }
     public void click() {
      ScrollBar.this.decreaseValue(1);
    }
  }

  class ScrollBarDownButton extends ScrollBarButton {
    float arrowWidth = 0;
    float arrowRatio = 0.1f;
    float cushionRatio = 1.5f;
    ScrollBarDownButton(float xi, float yi, float xf, float yf) {
      super(xi, yi, xf, yf);
      refreshArrowWidth();
      this.raised_border = true;
    }
    @Override public 
    void setLocation(float xi, float yi, float xf, float yf) {
      super.setLocation(xi, yi, xf, yf);
      this.refreshArrowWidth();
    }
     public void refreshArrowWidth() {
      if (ScrollBar.this.vertical) {
        this.arrowWidth = this.arrowRatio * this.button_height();
      }
      else {
        this.arrowWidth = this.arrowRatio * this.button_width();
      }
    }
    @Override public 
    void drawButton() {
      super.drawButton();
      stroke(0);
      strokeWeight(this.arrowWidth);
      if (ScrollBar.this.vertical) {
        line(this.xi + this.cushionRatio * this.arrowWidth, this.yi + this.cushionRatio * this.arrowWidth,
          this.xCenter(), this.yf - this.cushionRatio * this.arrowWidth);
        line(this.xf - this.cushionRatio * this.arrowWidth, this.yi + this.cushionRatio * this.arrowWidth,
          this.xCenter(), this.yf - this.cushionRatio * this.arrowWidth);
      }
      else {
        line(this.xi + this.cushionRatio * this.arrowWidth, this.yi + this.cushionRatio * this.arrowWidth,
          this.xf - this.cushionRatio * this.arrowWidth, this.yCenter());
        line(this.xi + this.cushionRatio * this.arrowWidth, this.yf - this.cushionRatio * this.arrowWidth,
          this.xf - this.cushionRatio * this.arrowWidth, this.yCenter());
      }
    }
    @Override public 
    void dehover() {
      this.clicked = false;
    }
     public void click() {
      ScrollBar.this.increaseValue(1);
    }
  }

  class ScrollBarUpSpaceButton extends ScrollBarButton {
    ScrollBarUpSpaceButton(float xi, float yi, float xf, float yf) {
      super(xi, yi, xf, yf);
      this.setColors(color(180), color(235), color(235), color(0), color(0));
    }
     public void click() {
      ScrollBar.this.decreaseValuePercent(0.1f);
    }
    @Override public 
    void release() {
      super.release();
      this.hovered = false;
    }
  }

  class ScrollBarDownSpaceButton extends ScrollBarButton {
    ScrollBarDownSpaceButton(float xi, float yi, float xf, float yf) {
      super(xi, yi, xf, yf);
      this.setColors(color(180), color(235), color(235), color(0), color(0));
    }
     public void click() {
      ScrollBar.this.increaseValuePercent(0.1f);
    }
    @Override public 
    void release() {
      super.release();
      this.hovered = false;
    }
  }

  class ScrollBarBarButton extends ScrollBarButton {
    protected float val = 0;
    ScrollBarBarButton(float xi, float yi, float xf, float yf) {
      super(xi, yi, xf, yf);
    }
    @Override public 
    void update(int millis) {
      if (!this.hidden) {
        drawButton();
        if (this.clicked && ScrollBar.this.value_size != 0) {
          this.hold_timer += millis - this.lastUpdateTime;
          if (ScrollBar.this.vertical) {
            ScrollBar.this.increaseValue((mouseY - this.val) / ScrollBar.this.value_size);
          }
          else {
            ScrollBar.this.increaseValue((mouseX - this.val) / ScrollBar.this.value_size);
          }
          this.click();
        }
      }
      this.lastUpdateTime = millis;
    }
     public void click() {
      if (ScrollBar.this.vertical) {
        this.val = mouseY;
      }
      else {
        this.val = mouseX;
      }
    }
  }

  protected ScrollBarUpButton button_up = new ScrollBarUpButton(0, 0, 0, 0);
  protected ScrollBarDownButton button_down = new ScrollBarDownButton(0, 0, 0, 0);
  protected ScrollBarUpSpaceButton button_upspace = new ScrollBarUpSpaceButton(0, 0, 0, 0);
  protected ScrollBarDownSpaceButton button_downspace = new ScrollBarDownSpaceButton(0, 0, 0, 0);
  protected ScrollBarBarButton button_bar = new ScrollBarBarButton(0, 0, 0, 0);

  protected float minValue = 0;
  protected float maxValue = 0;
  protected float value = 0;

  protected float xi;
  protected float yi;
  protected float xf;
  protected float yf;
  protected boolean vertical;
  protected float bar_size = 0;
  protected float min_size = 0;
  protected float value_size = 0;
  protected float step_size = 10; // constant

  ScrollBar(boolean vertical) {
    this(0, 0, 0, 0, vertical);
  }
  ScrollBar(float xi, float yi, float xf, float yf, boolean vertical) {
    this.vertical = vertical;
    this.setLocation(xi, yi, xf, yf);
  }

   public void move(float xMove, float yMove) {
    this.xi += xMove;
    this.yi += yMove;
    this.xf += xMove;
    this.yf += yMove;
    this.button_up.moveButton(xMove, yMove);
    this.button_down.moveButton(xMove, yMove);
    this.button_upspace.moveButton(xMove, yMove);
    this.button_downspace.moveButton(xMove, yMove);
    this.button_bar.moveButton(xMove, yMove);
  }

   public void setLocation(float xi, float yi, float xf, float yf) {
    this.xi = xi;
    this.yi = yi;
    this.xf = xf;
    this.yf = yf;
    if (this.vertical) {
      this.bar_size = this.xf - this.xi;
      if (3 * this.bar_size > this.yf - this.yi) {
        this.bar_size = (this.yf - this.yi) / 3.0f;
        this.min_size = 0.5f * this.bar_size;
      }
      else {
        this.min_size = min(this.bar_size, (this.yf - this.yi) / 9.0f);
      }
      this.button_up.setLocation(this.xi, this.yi, this.xf, this.yi + this.bar_size);
      this.button_down.setLocation(this.xi, this.yf - this.bar_size, this.xf, this.yf);
    }
    else {
      this.bar_size = this.yf - this.yi;
      if (3 * this.bar_size > this.xf - this.xi) {
        this.bar_size = (this.xf - this.xi) / 3.0f;
        this.min_size = 0.5f * this.bar_size;
      }
      else {
        this.min_size = min(this.bar_size, (this.xf - this.xi) / 9.0f);
      }
      this.button_up.setLocation(this.xi, this.yi, this.xi + this.bar_size, this.yf);
      this.button_down.setLocation(this.xf - this.bar_size, this.yi, this.xf, this.yf);
    }
    this.refreshBarButtonSizes();
  }

   public void refreshBarButtonSizes() {
    float bar_height = 0;
    if (this.vertical) {
      bar_height = this.yf - this.yi - 2 * this.bar_size;
    }
    else {
      bar_height = this.xf - this.xi - 2 * this.bar_size;
    }
    float bar_button_size = max(this.min_size, bar_height - this.step_size * (this.maxValue - this.minValue));
    if (this.maxValue == this.minValue) {
      this.value_size = 0;
    }
    else {
      this.value_size = (bar_height - bar_button_size) / (this.maxValue - this.minValue);
    }
    this.refreshBarButtons();
  }

   public void refreshBarButtons() {
    if (this.vertical) {
      float cut_one = this.yi + this.bar_size + this.value_size * (this.value - this.minValue);
      float cut_two = this.yf - this.bar_size - this.value_size * (this.maxValue - this.value);
      this.button_upspace.setLocation(this.xi, this.yi + this.bar_size, this.xf, cut_one);
      this.button_downspace.setLocation(this.xi, cut_two, this.xf, this.yf - this.bar_size);
      this.button_bar.setLocation(this.xi, cut_one, this.xf, cut_two);
    }
    else {
      float cut_one = this.xi + this.bar_size + this.value_size * (this.value - this.minValue);
      float cut_two = this.xf - this.bar_size - this.value_size * (this.maxValue - this.value);
      this.button_upspace.setLocation(this.xi + this.bar_size, this.yi, cut_one, this.yf);
      this.button_downspace.setLocation(cut_two, this.yi, this.xf - this.bar_size, this.yf);
      this.button_bar.setLocation(cut_one, this.yi, cut_two, this.yf);
    }
  }

   public void updateMinValue(float minValue) {
    this.minValue = minValue;
    if (this.minValue > this.maxValue) {
      this.minValue = this.maxValue;
    }
    if (this.value < this.minValue) {
      this.value = this.minValue;
    }
    this.refreshBarButtonSizes();
  }
   public void increaseMinValue(float amount) {
    this.updateMinValue(this.minValue + amount);
  }
   public void decreaseMinValue(float amount) {
    this.updateMinValue(this.minValue - amount);
  }

   public void updateMaxValue(float maxValue) {
    this.maxValue = maxValue;
    if (this.maxValue < this.minValue) {
      this.maxValue = this.minValue;
    }
    if (this.value > this.maxValue) {
      this.value = this.maxValue;
    }
    this.refreshBarButtonSizes();
  }
   public void increaseMaxValue(float amount) {
    this.updateMaxValue(this.maxValue + amount);
  }
   public void decreaseMaxValue(float amount) {
    this.updateMaxValue(this.maxValue - amount);
  }

   public void updateValue(float value) {
    this.value = value;
    if (this.value < this.minValue) {
      this.value = this.minValue;
    }
    else if (this.value > this.maxValue) {
      this.value = this.maxValue;
    }
    this.refreshBarButtons();
  }

   public void increaseValue(float amount) {
    this.updateValue(this.value + amount);
  }
   public void decreaseValue(float amount) {
    this.updateValue(this.value - amount);
  }
   public void increaseValuePercent(float percent) {
    this.updateValue(this.value + percent * (this.maxValue - this.minValue));
  }
   public void decreaseValuePercent(float percent) {
    this.updateValue(this.value - percent * (this.maxValue - this.minValue));
  }

   public void update(int millis) {
    this.button_up.update(millis);
    this.button_down.update(millis);
    this.button_upspace.update(millis);
    this.button_downspace.update(millis);
    this.button_bar.update(millis);
  }

   public void mouseMove(float mX, float mY) {
    this.button_up.mouseMove(mX, mY);
    this.button_down.mouseMove(mX, mY);
    this.button_upspace.mouseMove(mX, mY);
    this.button_downspace.mouseMove(mX, mY);
    this.button_bar.mouseMove(mX, mY);
  }

   public void mousePress() {
    this.button_up.mousePress();
    this.button_down.mousePress();
    this.button_upspace.mousePress();
    this.button_downspace.mousePress();
    this.button_bar.mousePress();
  }

   public void mouseRelease() {
    this.button_up.mouseRelease();
    this.button_down.mouseRelease();
    this.button_upspace.mouseRelease();
    this.button_downspace.mouseRelease();
    this.button_bar.mouseRelease();
  }
}



class TextBox {
  protected float xi = 0;
  protected float yi = 0;
  protected float xf = 0;
  protected float yf = 0;
  protected boolean hovered = false;
  protected int lastUpdateTime = 0;

  protected ScrollBar scrollbar = new ScrollBar(true);
  protected float scrollbar_max_width = 50;
  protected float scrollbar_min_width = 25;

  protected String text_ref = "";
  protected ArrayList<String> text_lines = new ArrayList<String>();
  protected float text_size = 15;
  protected float text_leading = 0;

  protected String text_title_ref = null;
  protected String text_title = null;
  protected float title_size = 22;

  protected int color_background = color(250);
  protected int color_header = color(200);
  protected int color_stroke = color(0);
  protected int color_text = color(0);
  protected int color_title = color(0);

  TextBox() {
    this(0, 0, 0, 0);
  }
  TextBox(float xi, float yi, float xf, float yf) {
    this.setLocation(xi, yi, xf, yf);
  }

   public void setLocation(float xi, float yi, float xf, float yf) {
    this.xi = xi;
    this.yi = yi;
    this.xf = xf;
    this.yf = yf;
    this.refreshTitle();
  }

   public void setTextSize(float text_size) {
    this.text_size = text_size;
    this.refreshText();
  }

   public void setTitleSize(float title_size) {
    this.title_size = title_size;
    this.refreshTitle();
  }

   public void refreshTitle() {
    this.setTitleText(this.text_title_ref);
  }

   public void setTitleText(String title) {
    this.text_title_ref = title;
    float scrollbar_width = min(this.scrollbar_max_width, 0.05f * (xf - xi));
    scrollbar_width = max(this.scrollbar_min_width, scrollbar_width);
    scrollbar_width = min(0.05f * (xf - xi), scrollbar_width);
    if (title == null) {
      this.text_title = null;
      this.scrollbar.setLocation(xf - scrollbar_width, yi, xf, yf);
    }
    else {
      this.text_title = "";
      textSize(this.title_size);
      for (int i = 0; i < title.length(); i++) {
        char nextChar = title.charAt(i);
        if (textWidth(this.text_title + nextChar) < this.xf - this.xi - 3) {
          this.text_title += nextChar;
        }
        else {
          break;
        }
      }
      this.scrollbar.setLocation(xf - scrollbar_width, yi + 1 + textAscent() + textDescent(), xf, yf);
    }
    this.refreshText();
  }

   public void refreshText() {
    this.setText(this.text_ref);
  }

   public void addText(String text) {
    this.setText(this.text_ref + text);
  }

   public void setText(String text) {
    this.text_ref = text;
    this.text_lines.clear();
    float currY = this.yi + 1;
    if (this.text_title_ref != null) {
      textSize(this.title_size);
      currY += textAscent() + textDescent() + 2;
    }
    textSize(this.text_size);
    float text_height = textAscent() + textDescent();
    float effective_xf = this.xf - this.xi - 3 - this.scrollbar.bar_size;
    int lines_above = 0;
    String[] lines = split(text, '\n');
    String currLine = "";
    boolean firstWord = true;
    for (int i = 0; i < lines.length; i++) {
      String[] words = split(lines[i], ' ');
      for (int j = 0; j < words.length; j++) {
        String word = " ";
        if (firstWord) {
          word = "";
        }
        word += words[j];
        if (textWidth(currLine + word) < effective_xf) {
          currLine += word;
          firstWord = false;
        }
        else if (firstWord) {
          for (int k = 0; k < word.length(); k++) {
            char nextChar = word.charAt(k);
            if (textWidth(currLine + nextChar) < effective_xf) {
              currLine += nextChar;
            }
            else {
              this.text_lines.add(currLine);
              currLine = "" + nextChar;
              firstWord = true;
              if (currY + text_height + 1 > this.yf) {
                lines_above++;
              }
              currY += text_height + this.text_leading;
            }
          }
          firstWord = false;
        }
        else {
          this.text_lines.add(currLine);
          currLine = words[j];
          firstWord = false;
          if (currY + text_height + 1 > this.yf) {
            lines_above++;
          }
          currY += text_height + this.text_leading;
        }
      }
      this.text_lines.add(currLine);
      currLine = "";
      firstWord = true;
      if (currY + text_height + 1 > this.yf) {
        lines_above++;
      }
      currY += text_height + this.text_leading;
    }
    this.scrollbar.updateMaxValue(lines_above);
  }

   public void update(int millis) {
    rectMode(CORNERS);
    fill(this.color_background);
    stroke(this.color_stroke);
    strokeWeight(1);
    rect(this.xi, this.yi, this.xf, this.yf);
    float currY = this.yi + 1;
    if (this.text_title_ref != null) {
      fill(this.color_header);
      textSize(this.title_size);
      rect(this.xi, this.yi, this.xf, this.yi + textAscent() + textDescent() + 1);
      fill(this.color_title);
      textAlign(CENTER, TOP);
      text(this.text_title, this.xi + 0.5f * (this.xf - this.xi), currY);
      currY += textAscent() + textDescent() + 2;
    }
    fill(this.color_text);
    textAlign(LEFT, TOP);
    textSize(this.text_size);
    float text_height = textAscent() + textDescent();
    for (int i = PApplet.parseInt(floor(this.scrollbar.value)); i < this.text_lines.size(); i++, currY += text_height + this.text_leading) {
      if (currY + text_height + 1 > this.yf) {
        break;
      }
      text(this.text_lines.get(i), this.xi + 2, currY);
    }
    if (this.scrollbar.maxValue != this.scrollbar.minValue) {
      this.scrollbar.update(millis);
    }
    this.lastUpdateTime = millis;
  }

   public void mouseMove(float mX, float mY) {
    this.scrollbar.mouseMove(mX, mY);
    if (mX > this.xi && mX < this.xf && mY > this.yi && mY < this.yf) {
      this.hovered = true;
    }
    else {
      this.hovered = false;
    }
  }

   public void mousePress() {
    this.scrollbar.mousePress();
  }

   public void mouseRelease() {
    this.scrollbar.mouseRelease();
  }

   public void scroll(int amount) {
    if (this.hovered) {
      this.scrollbar.increaseValue(amount);
    }
  }
}


abstract class ListTextBox extends TextBox {
  protected ArrayList<String> text_lines_ref;
  protected int line_hovered = -1;
  protected int line_clicked = -1;
  protected int highlight_color = color(100, 100, 250, 120);
  protected int doubleclickTimer = 0;
  protected int doubleclickTime = 400;

  ListTextBox() {
    this(0, 0, 0, 0);
  }
  ListTextBox(float xi, float yi, float xf, float yf) {
    super(xi, yi, xf, yf);
  }

  @Override public 
  void setText(String text) {
    this.text_ref = text;
    this.text_lines.clear();
    this.text_lines_ref = new ArrayList<String>();
    float currY = this.yi + 1;
    if (this.text_title_ref != null) {
      textSize(this.title_size);
      currY += textAscent() + textDescent() + 2;
    }
    textSize(this.text_size);
    float text_height = textAscent() + textDescent();
    float effective_xf = this.xf - this.xi - 3 - this.scrollbar.bar_size;
    int lines_above = 0;
    String[] lines = split(text, '\n');
    for (String line : lines) {
      this.text_lines_ref.add(line);
      String currLine = "";
      for (int i = 0; i < line.length(); i++) {
        char nextChar = line.charAt(i);
        if (textWidth(currLine + nextChar) < effective_xf) {
          currLine += nextChar;
        }
        else {
          break;
        }
      }
      this.text_lines.add(currLine);
      if (currY + text_height + 1 > this.yf) {
        lines_above++;
      }
      currY += text_height + this.text_leading;
    }
    this.scrollbar.updateMaxValue(lines_above);
  }

   public void addLine(String line) {
    this.addText("\n" + line);
  }

   public String highlightedLine() {
    if (this.line_clicked < 0 || this.line_clicked >= this.text_lines_ref.size()) {
      return null;
    }
    return this.text_lines_ref.get(this.line_clicked);
  }

  @Override public 
  void update(int millis) {
    int timeElapsed = millis - this.lastUpdateTime;
    super.update(millis);
    if (this.doubleclickTimer > 0) {
      this.doubleclickTimer -= timeElapsed;
    }
    if (this.line_clicked < floor(this.scrollbar.value)) {
      return;
    }
    float currY = this.yi + 1;
    if (this.text_title_ref != null) {
      textSize(this.title_size);
      currY += textAscent() + textDescent() + 2;
    }
    textSize(this.text_size);
    float text_height = textAscent() + textDescent();
    currY += (this.line_clicked - floor(this.scrollbar.value)) * (text_height + this.text_leading);
    if (currY + text_height + 1 > this.yf) {
      return;
    }
    rectMode(CORNERS);
    fill(this.highlight_color);
    strokeWeight(0.001f);
    stroke(this.highlight_color);
    rect(this.xi + 1, currY, this.xf - 2 - this.scrollbar.bar_size, currY + text_height);
  }

  @Override public 
  void mouseMove(float mX, float mY) {
    this.scrollbar.mouseMove(mX, mY);
    if (mX > this.xi && mX < this.xf && mY > this.yi && mY < this.yf) {
      this.hovered = true;
      float currY = this.yi + 1;
      if (this.text_title_ref != null) {
        textSize(this.title_size);
        currY += textAscent() + textDescent() + 2;
      }
      textSize(this.text_size);
      float line_height = textAscent() + textDescent() + this.text_leading;
      int target_line = PApplet.parseInt(floor(this.scrollbar.value) + floor((mY - currY) / line_height));
      int lines_shown = this.text_lines.size() - PApplet.parseInt(this.scrollbar.maxValue);
      if (target_line < 0 || mX > (this.xf - this.scrollbar.bar_size) || target_line >= this.text_lines_ref.size() ||
        target_line - PApplet.parseInt(floor(this.scrollbar.value)) >= lines_shown) {
        this.line_hovered = -1;
      }
      else {
        this.line_hovered = target_line;
      }
    }
    else {
      this.hovered = false;
      this.line_hovered = -1;
    }
  }

  @Override public 
  void mousePress() {
    this.scrollbar.mousePress();
    if (this.line_hovered > -1) {
      if (this.doubleclickTimer > 0  && this.line_clicked == this.line_hovered) {
        this.line_clicked = this.line_hovered;
        this.doubleclick();
      }
      else {
        this.line_clicked = this.line_hovered;
        this.click();
      }
      this.doubleclickTimer = this.doubleclickTime;
    }
    else {
      this.line_clicked = this.line_hovered;
    }
  }

   public void jump_to_line(boolean hard_jump) {
    if (this.line_clicked < 0) {
      return;
    }
    if (hard_jump || this.line_clicked < PApplet.parseInt(floor(this.scrollbar.value))) {
      this.scrollbar.updateValue(this.line_clicked);
      return;
    }
    int lines_shown = this.text_lines.size() - PApplet.parseInt(this.scrollbar.maxValue);
    if (this.line_clicked >= PApplet.parseInt(floor(this.scrollbar.value)) + lines_shown) {
      this.scrollbar.increaseValue(1 + this.line_clicked - PApplet.parseInt(floor(this.scrollbar.value)) - lines_shown);
    }
  }

   public void keyPress() {
    if (!this.hovered) {
      return;
    }
    if (key == CODED) {
      switch(keyCode) {
        case UP:
          if (this.line_clicked > 0) {
            this.line_clicked--;
            this.jump_to_line(false);
          }
          break;
        case DOWN:
          if (this.line_clicked < this.text_lines_ref.size() - 1) {
            this.line_clicked++;
            this.jump_to_line(false);
          }
          break;
        default:
          break;
      }
    }
  }

   public abstract void click(); // click on line
   public abstract void doubleclick(); // doubleclick on line
}



class DropDownList extends ListTextBox {
  protected boolean active = false;
  protected boolean show_highlight = false;
  protected String hint_text = "";

  DropDownList() {
    this(0, 0, 0, 0);
  }
  DropDownList(float xi, float yi, float xf, float yf) {
    super(xi, yi, xf, yf);
  }

  @Override public 
  void update(int millis) {
    if (this.active) {
      super.update(millis);
    }
    else {
      textAlign(LEFT, TOP);
      textSize(this.text_size);
      float text_height = textAscent() + textDescent();
      rectMode(CORNERS);
      fill(this.color_background);
      stroke(this.color_stroke);
      strokeWeight(1);
      rect(this.xi, this.yi, this.xf - 1 - this.scrollbar.bar_size, this.yi + 3 + text_height);
      if (this.line_clicked >= 0) {
        fill(this.color_text);
        text(this.text_lines.get(this.line_clicked), this.xi + 2, this.yi + 1);
      }
      else {
        fill(this.color_text, 150);
        text(this.hint_text, this.xi + 2, this.yi + 1);
      }
      if (this.show_highlight) {
        fill(this.highlight_color);
        strokeWeight(0.0001f);
        stroke(this.highlight_color);
        rect(this.xi + 1, this.yi + 1, this.xf - 2 - this.scrollbar.bar_size, this.yi + 1 + text_height);
      }
    }
  }

  @Override public 
  void mousePress() {
    if (!this.hovered) {
      this.doubleclick();
      this.show_highlight = false;
    }
    if (this.active) {
      super.mousePress();
    }
    else {
      int last_line_clicked = this.line_clicked;
      super.mousePress();
      if (this.line_clicked == PApplet.parseInt(floor(this.scrollbar.value))) {
        if (this.show_highlight) {
          this.active = true;
          this.line_clicked = last_line_clicked;
          this.jump_to_line(true);
        }
        else {
          this.line_clicked = last_line_clicked;
          this.show_highlight = true;
        }
      }
      else {
        this.line_clicked = last_line_clicked;
        this.show_highlight = false;
      }
    }
  }

  @Override public 
  void keyPress() {
    if (!this.show_highlight && !this.active) {
      return;
    }
    if (key == CODED) {
      switch(keyCode) {
        case UP:
          if (this.line_clicked > 0) {
            this.line_clicked--;
            this.jump_to_line(false);
          }
          break;
        case DOWN:
          if (this.line_clicked < this.text_lines_ref.size() - 1) {
            this.line_clicked++;
            this.jump_to_line(false);
          }
          break;
        default:
          break;
      }
    }
    else {
      switch(key) {
        case ENTER:
        case RETURN:
          if (this.active) {
            this.doubleclick();
          }
          else {
            this.active = true;
            this.jump_to_line(true);
          }
          break;
        case ESC:
          this.doubleclick();
          this.show_highlight = false;
          break;
        default:
          break;
      }
    }
  }

   public void click() {}

   public void doubleclick() {
    this.active = false;
    this.show_highlight = true;
  }
}




class InputBox extends RectangleButton {
  protected String text = "";
  protected String hint_text = "";
  protected int hint_color = color(80);
  protected boolean typing = false;
  protected String display_text = "";

  protected int location_display = 0;
  protected int location_cursor = 0;

  protected float cursor_weight = 1;
  protected int cursor_blink_time = 450;
  protected int cursor_blink_timer = 0;
  protected boolean cursor_blinking = true;

  InputBox(float xi, float yi, float xf, float yf) {
    super(xi, yi, xf, yf);
    this.roundness = 0;
    this.setColors(color(170), color(220), color(220), color(255), color(0));
  }

   public void refreshText() {
    this.setText(this.text);
  }
   public void setText(String text) {
    if (text == null) {
      text = "";
    }
    this.text = text;
    this.updateDisplayText();
    if (this.location_cursor > this.text.length()) {
      this.location_cursor = this.text.length();
    }
    if (this.location_cursor > this.location_display + this.display_text.length()) {
      this.location_display = this.location_cursor - this.display_text.length();
      this.updateDisplayText();
    }
  }

   public void setTextSize(float text_size) {
    this.text_size = text_size;
    this.refreshText();
  }

  @Override public 
  void setLocation(float xi, float yi, float xf, float yf) {
    super.setLocation(xi, yi, xf, yf);
    this.updateDisplayText();
  }

  @Override public 
  void stretchButton(float amount, int direction) {
    super.stretchButton(amount, direction);
    this.updateDisplayText();
  }

   public void updateDisplayText() {
    if (this.text == null) {
      this.text = "";
    }
    this.display_text = "";
    textSize(this.text_size);
    float maxWidth = this.xf - this.xi - 2 - textWidth(' ');
    boolean decreaseDisplayLocation = true;
    for (int i = this.location_display; i < this.text.length(); i++ ) {
      if (textWidth(this.display_text + this.text.charAt(i)) > maxWidth) {
        decreaseDisplayLocation = false;
        break;
      }
      this.display_text += this.text.charAt(i);
    }
    if (decreaseDisplayLocation) {
      while(this.location_display > 0 && textWidth(this.text.charAt(
        this.location_display - 1) + this.display_text) <= maxWidth) {
        this.location_display--;
        this.display_text = this.text.charAt(this.location_display) + this.display_text;
      }
    }
    // if say increased text size
    else if (this.location_cursor - this.location_display > this.display_text.length()) {
      int dif = this.location_cursor - this.location_display - this.display_text.length();
      this.location_display += dif;
      this.display_text = this.display_text.substring(dif);
    }
  }

   public void resetBlink() {
    this.cursor_blinking = true;
    this.cursor_blink_timer = 0;
  }

  @Override public 
  int fillColor() {
    if (this.disabled) {
      return this.color_disabled;
    }
    else if (this.typing) {
      return this.color_click;
    }
    else {
      return this.color_default;
    }
  }

  @Override public 
  void drawButton() {
    super.drawButton();
    textAlign(LEFT, TOP);
    if (this.text.equals("")) {
      textSize(this.text_size - 2);
      fill(this.hint_color);
      text(this.hint_text, this.xi + 2, this.yi + 1);
    }
    else {
      textSize(this.text_size);
      fill(this.color_text);
      text(this.display_text, this.xi + 2, this.yi + 1);
    }
    if (this.typing && this.cursor_blinking) {
      strokeWeight(this.cursor_weight);
      fill(this.color_stroke);
      float x_cursor = this.xi + 2 + textWidth(this.display_text.substring(
        0, this.location_cursor - this.location_display));
      line(x_cursor, this.yi + 2, x_cursor, this.yf - 2);
    }
  }

  @Override public 
  void update(int millis) {
    int timeElapsed = millis - this.lastUpdateTime;
    super.update(millis);
    if (this.typing) {
      this.cursor_blink_timer += timeElapsed;
      if (this.cursor_blink_timer > this.cursor_blink_time) {
        this.cursor_blink_timer -= this.cursor_blink_time;
        this.cursor_blinking = !this.cursor_blinking;
      }
    }
  }

   public void dehover() {
  }

   public void hover() {
  }

  @Override public 
  void mousePress() {
    this.typing = false;
    super.mousePress();
  }
   public void click() {
    this.typing = true;
    this.resetBlink();
  }

   public void release() {
  }

   public void keyPress() {
    if (!this.typing) {
      return;
    }
    if (key == CODED) {
      switch(keyCode) {
        case LEFT:
          this.location_cursor--;
          if (this.location_cursor < 0) {
            this.location_cursor = 0;
          }
          else if (this.location_cursor < this.location_display) {
            this.location_display--;
            this.updateDisplayText();
          }
          break;
        case RIGHT:
          this.location_cursor++;
          if (this.location_cursor > this.text.length()) {
            this.location_cursor = this.text.length();
          }
          else if (this.location_cursor > this.location_display + this.display_text.length()) {
            this.location_display++;
            this.updateDisplayText();
          }
          break;
        case KeyEvent.VK_HOME:
          this.location_cursor = 0;
          this.location_display = 0;
          this.updateDisplayText();
          break;
        case KeyEvent.VK_END:
          this.location_cursor = this.text.length();
          this.location_display = this.text.length();
          this.updateDisplayText();
          break;
        default:
          break;
      }
    }
    else {
      switch(key) {
        case BACKSPACE:
          if (this.location_cursor > 0) {
            this.location_cursor--;
            if (this.location_cursor < this.location_display) {
              this.location_display--;
            }
            this.setText(this.text.substring(0, this.location_cursor) +
              this.text.substring(this.location_cursor + 1, this.text.length()));
          }
          break;
        case TAB:
          break;
        case ENTER:
        case RETURN:
          break;
        case ESC:
          this.typing = false;
          break;
        case DELETE:
          break;
        default:
          this.location_cursor++;
          if (this.location_cursor > this.location_display + this.display_text.length()) {
            this.location_display++;
          }
          this.setText(this.text.substring(0, this.location_cursor - 1) + key +
            this.text.substring(this.location_cursor - 1, this.text.length()));
          break;
      }
    }
    this.resetBlink();
  }

   public void keyRelease() {
    if (!this.typing) {
      return;
    }
    this.resetBlink();
  }
}




class Slider  {
  class SliderButton extends CircleButton {
    protected boolean active = false;
    protected float active_grow_factor = 1.3f;
    protected int active_color = color(0, 50, 0);
    protected float lastX = 0;
    protected float changeFactor = 1;

    SliderButton() {
      super(0, 0, 0);
      this.setColors(color(170), color(255, 0), color(255, 0), color(255, 0), color(0));
      strokeWeight(2);
    }

    @Override public 
    float radius() {
      if (this.active) {
        return this.active_grow_factor * super.radius();
      }
      else {
        return super.radius();
      }
    }

     public int lineColor() {
      if (this.active) {
        return this.active_color;
      }
      else {
        return this.color_stroke;
      }
    }

    @Override public 
    void drawButton() {
      ellipseMode(RADIUS);
      if (this.active) {
        fill(this.active_color);
      }
      else {
        noFill();
      }
      stroke(this.lineColor());
      strokeWeight(Slider.this.line_thickness);
      circle(this.xc, this.yc, this.radius());
    }

     public void mouseMove(float mX, float mY) {
      super.mouseMove(mX, mY);
      if (this.active && this.clicked) {
        this.moveButton(mX - this.lastX, 0);
        this.changeFactor = 1; // how much value actually changed (accounting for step_size)
        Slider.this.refreshValue();
        this.lastX += this.changeFactor * (mX - this.lastX);
      }
      else {
        this.lastX = mX;
      }
    }

     public void mousePress() {
      super.mousePress();
      if (!this.hovered) {
        this.active = false;
      }
    }

     public void scroll(int amount) {
      if (!this.active) {
        return;
      }
      Slider.this.step(amount);
    }

     public void keyPress() {
      if (!this.active) {
        return;
      }
      if (key == CODED) {
        switch(keyCode) {
          case LEFT:
            Slider.this.step(-1);
            break;
          case RIGHT:
            Slider.this.step(1);
            break;
          default:
            break;
        }
      }
    }

     public void hover() {}
     public void dehover() {}
     public void release() {}

     public void click() {
      this.active = true;
    }
  }

  protected float xi;
  protected float yi;
  protected float xf;
  protected float yf;
  protected float yCenter;

  protected float min_value = 0;
  protected float max_value = 0;
  protected float step_size = -1;
  protected boolean no_step = true;
  protected float value = 0;

  protected SliderButton button = new SliderButton();
  protected float offset;
  protected float line_thickness = 3;

  Slider() {
    this(0, 0, 0, 0);
  }
  Slider(float xi, float yi, float xf, float yf) {
    this.setLocation(xi, yi, xf, yf);
  }

   public void setLocation(float xi, float yi, float xf, float yf) {
    this.xi = xi;
    this.yi = yi;
    this.xf = xf;
    this.yf = yf;
    this.yCenter = yi + 0.5f * (yf - yi);
    this.button.setLocation(xi, this.yCenter, 0.5f * (yf - yi) / this.button.active_grow_factor);
    this.offset = this.button.xr * this.button.active_grow_factor;
    this.refreshButton();
  }

  // called when slider changes value or size (this never changes value)
   public void refreshButton() {
    if (this.min_value == this.max_value) {
      this.button.moveButton(this.xi + this.offset - this.button.xCenter(), 0);
      return;
    }
    float targetX = this.xi + this.offset + (this.xf - 2 * this.offset - this.xi) *
      (this.value - this.min_value) / (this.max_value - this.min_value);
    this.button.moveButton(targetX - this.button.xCenter(), 0);
  }

  // called when button changes value (this changes value so calls refreshButton)
   public void refreshValue() {
    float targetValue = this.min_value + (this.button.xCenter() - this.xi - this.offset)
      * (this.max_value - this.min_value) / (this.xf - 2 * this.offset - this.xi);
    boolean hitbound = false;
    if (targetValue >= this.max_value) {
      float change = targetValue - this.value;
      if (change > 0) {
        this.button.changeFactor = (this.max_value - this.value) / change;
      }
      targetValue = this.max_value;
      hitbound = true;
    }
    else if (targetValue <= this.min_value) {
      float change = targetValue - this.value;
      if (change < 0) {
        this.button.changeFactor = (this.min_value - this.value) / change;
      }
      targetValue = this.min_value;
      hitbound = true;
    }
    float change = targetValue - this.value;
    if (!this.no_step && !hitbound && this.step_size != 0 && change != 0) {
      float new_change = this.step_size * (floor(change / this.step_size));
      this.button.changeFactor = new_change/change;
      change = new_change;
    }
    this.value += change;
    this.refreshButton();
  }

   public void bounds(float min, float max, float step) {
    if (min > max) {
      min = max;
    }
    this.min_value = min;
    this.max_value = max;
    this.step_size = step;
    if (this.value < min) {
      this.value = min;
    }
    else if (this.value > max) {
      this.value = max;
    }
    if (step > 0) {
      this.no_step = false;
    }
    else {
      this.no_step = true;
    }
  }

   public void step(int amount) {
    if (this.no_step) {
      this.value += 0.1f * (this.max_value - this.min_value) * amount;
    }
    else {
      this.value += this.step_size * amount;
    }
    if (this.value > this.max_value) {
      this.value = this.max_value;
    }
    else if (this.value < this.min_value) {
      this.value = this.min_value;
    }
    this.refreshButton();
  }

   public void setValue(float value) {
    this.value = value;
    if (this.value > this.max_value) {
      this.value = this.max_value;
    }
    else if (this.value < this.min_value) {
      this.value = this.min_value;
    }
    this.refreshButton();
  }

   public void update(int millis) {
    strokeWeight(this.line_thickness);
    stroke(this.button.active_color);
    line(min(this.xi + this.offset, this.button.xc - this.button.radius()),
      this.yCenter, this.button.xc - this.button.radius(), this.yCenter);
    stroke(this.button.color_stroke);
    line(this.button.xc + this.button.radius(), this.yCenter,
      max(this.xf - this.offset, this.button.xc + this.button.radius()), this.yCenter);
    this.button.update(millis);
  }

   public void mouseMove(float mX, float mY) {
    this.button.mouseMove(mX, mY);
  }

   public void mousePress() {
    this.button.mousePress();
  }

   public void mouseRelease() {
    this.button.mouseRelease();
  }

   public void scroll(int amount) {
    this.button.scroll(amount);
  }

   public void keyPress() {
    this.button.keyPress();
  }
}




enum FormFieldSubmit {
  NONE, SUBMIT, CANCEL;
}

abstract class FormField {
  protected String message;
  protected float field_width = 0;

  FormField(String message) {
    this.message = message;
  }

   public float getWidth() {
    return this.field_width;
  }
   public void setWidth(float new_width) {
    this.field_width = new_width;
    this.updateWidthDependencies();
  }

   public abstract void updateWidthDependencies();
   public abstract float getHeight();
   public abstract String getValue();
   public abstract void setValue(String newValue);

   public abstract FormFieldSubmit update(int millis);
   public abstract void mouseMove(float mX, float mY);
   public abstract void mousePress();
   public abstract void mouseRelease();
   public abstract void keyPress();
   public abstract void keyRelease();
   public abstract void scroll(int amount);

   public abstract void submit();
}


// Spacer
class SpacerFormField extends FormField {
  protected float spacer_height;

  SpacerFormField(float spacer_height) {
    super("");
    this.spacer_height = spacer_height;
  }

   public void updateWidthDependencies() {}

   public float getHeight() {
    return this.spacer_height;
  }

   public String getValue() {
    return this.message;
  }
   public void setValue(String newValue) {
    this.message = newValue;
  }

   public FormFieldSubmit update(int millis) {
    return FormFieldSubmit.NONE;
  }
   public void mouseMove(float mX, float mY) {}
   public void mousePress() {}
   public void mouseRelease() {}
   public void scroll(int amount) {}
   public void keyPress() {}
   public void keyRelease() {}
   public void submit() {}
}


// One line message
class MessageFormField extends FormField {
  protected String display_message; // can be different if truncated
  protected float default_text_size = 22;
  protected float minimum_text_size = 8;
  protected float text_size = 0;
  protected int text_color = color(0);

  MessageFormField(String message) {
    super(message);
    this.display_message = message;
  }

   public void setTextSize(float new_text_size) {
    this.default_text_size = new_text_size;
    this.updateWidthDependencies();
  }

   public void updateWidthDependencies() {
    float max_width = this.field_width - 2;
    this.text_size = this.default_text_size;
    textSize(this.text_size);
    this.display_message = this.message;
    while(textWidth(this.display_message) > max_width) {
      this.text_size -= 0.2f;
      textSize(this.text_size);
      if (this.text_size < this.minimum_text_size) {
        this.text_size = this.minimum_text_size;
        textSize(this.text_size);
        String truncated_string = "";
        for (int i = 0 ; i < this.display_message.length(); i++) {
          char c = this.display_message.charAt(i);
          if (textWidth(truncated_string + c) <= max_width) {
            truncated_string += c;
          }
          else {
            this.display_message = truncated_string;
            break;
          }
        }
        break;
      }
    }
  }

   public float getHeight() {
    textSize(this.text_size);
    return textAscent() + textDescent() + 2;
  }

   public String getValue() {
    return this.message;
  }
   public void setValue(String newValue) {
    this.message = newValue;
    this.updateWidthDependencies();
  }

   public FormFieldSubmit update(int millis) {
    textSize(this.text_size);
    textAlign(LEFT, TOP);
    fill(this.text_color);
    text(this.display_message, 1, 1);
    return FormFieldSubmit.NONE;
  }

   public void mouseMove(float mX, float mY) {
  }

   public void mousePress() {}
   public void mouseRelease() {}
   public void scroll(int amount) {}
   public void keyPress() {}
   public void keyRelease() {}
   public void submit() {}
}


// Multi-line message
class TextBoxFormField extends FormField {
  protected TextBox textbox = new TextBox(0, 0, 0, 0);

  TextBoxFormField(String message, float box_height) {
    super(message);
    this.textbox.setText(message);
    this.textbox.setLocation(0, 0, 0, box_height);
    this.textbox.color_background = color(255, 0);
    this.textbox.color_header = color(255, 0);
    this.textbox.color_stroke = color(255, 0);
  }

   public void updateWidthDependencies() {
    this.textbox.setLocation(0, 0, this.field_width, this.getHeight());
  }
   public float getHeight() {
    return this.textbox.yf - this.textbox.yi;
  }

   public String getValue() {
    return this.textbox.text_ref;
  }
   public void setValue(String newValue) {
    this.textbox.setText(newValue);
  }

   public FormFieldSubmit update(int millis) {
    this.textbox.update(millis);
    return FormFieldSubmit.NONE;
  }

   public void mouseMove(float mX, float mY) {
    this.textbox.mouseMove(mX, mY);
  }

   public void mousePress() {
    this.textbox.mousePress();
  }

   public void mouseRelease() {
    this.textbox.mouseRelease();
  }

   public void scroll(int amount) {
    this.textbox.scroll(amount);
  }

   public void keyPress() {}
   public void keyRelease() {}
   public void submit() {}
}


// String input
class StringFormField extends MessageFormField {
  protected InputBox input = new InputBox(0, 0, 0, 0);

  StringFormField(String message) {
    this(message, "");
  }
  StringFormField(String message, String hint) {
    super(message);
    if (hint != null) {
      this.input.hint_text = hint;
    }
  }

   public void updateWidthDependencies() {
    float temp_field_width = this.field_width;
    this.field_width = 0.5f * this.field_width;
    super.updateWidthDependencies();
    this.field_width = temp_field_width;
    this.input.setTextSize(this.text_size);
    textSize(this.text_size);
    this.input.setLocation(textWidth(this.message), 0, this.field_width, textAscent() + textDescent() + 2);
  }

  @Override public 
  String getValue() {
    return this.input.text;
  }
  @Override public 
  void setValue(String newValue) {
    this.input.setText(newValue);
  }

  @Override public 
  FormFieldSubmit update(int millis) {
    this.input.update(millis);
    return super.update(millis);
  }

  @Override public 
  void mouseMove(float mX, float mY) {
    this.input.mouseMove(mX, mY);
  }

  @Override public 
  void mousePress() {
    this.input.mousePress();
  }

  @Override public 
  void mouseRelease() {
    this.input.mouseRelease();
  }

  @Override public 
  void keyPress() {
    this.input.keyPress();
  }
  @Override public 
  void keyRelease() {
    this.input.keyRelease();
  }
}


class IntegerFormField extends StringFormField {
  protected int min_value = 0;
  protected int max_value = 0;

  IntegerFormField(String message) {
    this(message, "");
  }
  IntegerFormField(String message, String hint) {
    this(message, hint, 0, 0);
  }
  IntegerFormField(String message, int min, int max) {
    this(message, "", min, max);
  }
  IntegerFormField(String message, String hint, int min, int max) {
    super(message, hint);
    this.min_value = min;
    this.max_value = max;
  }

   public void submit() {
    int value = toInt(this.input.text);
    if (value > this.max_value) {
      value = this.max_value;
    }
    else if (value < this.min_value) {
      value = this.min_value;
    }
    this.input.setText(Integer.toString(value));
  }
}


class FloatFormField extends StringFormField {
  protected float min_value = 0;
  protected float max_value = 0;

  FloatFormField(String message) {
    this(message, "");
  }
  FloatFormField(String message, String hint) {
    this(message, hint, 0, 0);
  }
  FloatFormField(String message, float min, float max) {
    this(message, "", min, max);
  }
  FloatFormField(String message, String hint, float min, float max) {
    super(message, hint);
    this.min_value = min;
    this.max_value = max;
  }

   public void submit() {
    float value = toFloat(this.input.text);
    if (value > this.max_value) {
      value = this.max_value;
    }
    else if (value < this.min_value) {
      value = this.min_value;
    }
    this.input.setText(Float.toString(value));
  }
}


class BooleanFormField extends StringFormField {
  BooleanFormField(String message) {
    this(message, "");
  }
  BooleanFormField(String message, String hint) {
    super(message, hint);
  }

   public void submit() {
    this.input.setText(Boolean.toString(toBoolean(this.input.text)));
  }
}


// Array of radio buttons
class RadiosFormField extends MessageFormField {
  class DefaultRadioButton extends RadioButton {
    DefaultRadioButton(String message) {
      super(0, 0, 0);
      this.message = message;
    }
     public void hover() {
    }
     public void dehover() {
    }
     public void release() {
    }
  }

  protected ArrayList<RadioButton> radios = new ArrayList<RadioButton>();
  protected float radio_padding = 6;
  protected int index_selected = -1;

  RadiosFormField(String message) {
    super(message);
  }

   public void addRadio() {
    this.addRadio("");
  }
   public void addRadio(String message) {
    this.addRadio(new DefaultRadioButton(message));
  }
   public void addRadio(RadioButton radio) {
    this.radios.add(radio);
    this.updateWidthDependencies();
  }

  @Override public 
  void updateWidthDependencies() {
    super.updateWidthDependencies();
    float currY = super.getHeight() + this.radio_padding;
    textSize(this.text_size - 2);
    for (RadioButton radio : this.radios) {
      radio.text_size = this.text_size - 2;
      float radius = 0.5f * min(0.8f * (textAscent() + textDescent() + 2), abs(this.field_width - textWidth(radio.message)));
      float xc = textWidth(radio.message) + radius;
      float yc = currY + 0.5f * (textAscent() + textDescent() + 2);
      radio.setLocation(xc, yc, radius);
      currY += textAscent() + textDescent() + 2 + this.radio_padding;
    }
  }

  @Override public 
  float getHeight() {
    float field_height = super.getHeight();
    field_height += this.radios.size() * this.radio_padding;
    boolean first = true;
    for (RadioButton radio : this.radios) {
      textSize(radio.text_size);
      field_height += textAscent() + textDescent() + 2;
    }
    return field_height;
  }

  @Override public 
  String getValue() {
    return Integer.toString(this.index_selected);
  }
  @Override public 
  void setValue(String newValue) {
    if (isInt(newValue)) {
      this.index_selected = toInt(newValue);
      this.uncheckOthers();
    }
  }

  @Override public 
  FormFieldSubmit update(int millis) {
    FormFieldSubmit returnValue = super.update(millis);
    for (RadioButton radio : this.radios) {
      textSize(radio.text_size);
      textAlign(LEFT, TOP);
      fill(radio.color_text);
      text(radio.message, 1, radio.yCenter() - radio.radius() + 1);
      radio.update(millis);
    }
    return returnValue;
  }

  @Override public 
  void mouseMove(float mX, float mY) {
    for (RadioButton radio : this.radios) {
      radio.mouseMove(mX, mY);
    }
  }

  @Override public 
  void mousePress() {
    for (int i = 0; i < this.radios.size(); i++) {
      RadioButton radio = this.radios.get(i);
      boolean pressed = radio.checked;
      radio.mousePress();
      if (!pressed && radio.checked) {
        this.index_selected = i;
        this.uncheckOthers();
      }
    }
  }

   public void uncheckOthers() {
    for (int i = 0; i < this.radios.size(); i++) {
      if (i == this.index_selected) {
        continue;
      }
      this.radios.get(i).checked = false;
    }
  }

  @Override public 
  void mouseRelease() {
    for (RadioButton radio : this.radios) {
      radio.mouseRelease();
    }
  }
}


// Single checkbox
class CheckboxFormField extends MessageFormField {
  class DefaultCheckBox extends CheckBox {
    DefaultCheckBox() {
      super(0, 0, 0, 0);
    }
     public void hover() {
    }
     public void dehover() {
    }
     public void release() {
    }
  }

  protected CheckBox checkbox = new DefaultCheckBox();

  CheckboxFormField(String message) {
    super(message);
  }

  @Override public 
  void updateWidthDependencies() {
    float temp_field_width = this.field_width;
    this.field_width = 0.75f * this.field_width;
    super.updateWidthDependencies();
    this.field_width = temp_field_width;
    textSize(this.text_size);
    float checkboxsize = min(0.8f * this.getHeight(), this.field_width - textWidth(this.message));
    float xi = textWidth(this.message);
    float yi = 0.5f * (this.getHeight() - checkboxsize);
    this.checkbox.setLocation(xi, yi, xi + checkboxsize, yi + checkboxsize);
  }

  @Override public 
  String getValue() {
    return Boolean.toString(this.checkbox.checked);
  }
  @Override public 
  void setValue(String newValue) {
    if (isBoolean(newValue)) {
      this.checkbox.checked = toBoolean(newValue);
    }
  }

  @Override public 
  FormFieldSubmit update(int millis) {
    this.checkbox.update(millis);
    return super.update(millis);
  }

  @Override public 
  void mouseMove(float mX, float mY) {
    this.checkbox.mouseMove(mX, mY);
  }

  @Override public 
  void mousePress() {
    this.checkbox.mousePress();
  }

  @Override public 
  void mouseRelease() {
    this.checkbox.mouseRelease();
  }
}


// Slider
class SliderFormField extends MessageFormField {
  protected Slider slider = new Slider();
  protected float max_slider_height = 30;

  SliderFormField(String message, float max) {
    this(message, 0, max, -1);
  }
  SliderFormField(String message, float min, float max) {
    this(message, min, max, -1);
  }
  SliderFormField(String message, float min, float max, float step) {
    super(message);
    this.slider.bounds(min, max, step);
    this.slider.setValue(min);
  }

  @Override public 
  void updateWidthDependencies() {
    float temp_field_width = this.field_width;
    this.field_width = 0.4f * this.field_width;
    super.updateWidthDependencies();
    this.field_width = temp_field_width;
    textSize(this.text_size);
    float sliderheight = min(this.getHeight(), this.max_slider_height);
    float xi = textWidth(this.message) + 0.05f * this.field_width;
    float yi = 0.5f * (this.getHeight() - sliderheight);
    this.slider.setLocation(xi, yi, this.field_width, yi + sliderheight);
  }

  @Override public 
  String getValue() {
    return Float.toString(this.slider.value);
  }
  @Override public 
  void setValue(String newValue) {
    if (isFloat(newValue)) {
      this.slider.setValue(toFloat(newValue));
    }
  }

  @Override public 
  FormFieldSubmit update(int millis) {
    this.slider.update(millis);
    return super.update(millis);
  }

  @Override public 
  void mouseMove(float mX, float mY) {
    this.slider.mouseMove(mX, mY);
  }

  @Override public 
  void mousePress() {
    this.slider.mousePress();
  }

  @Override public 
  void mouseRelease() {
    this.slider.mouseRelease();
  }

  @Override public 
  void scroll(int amount) {
    this.slider.scroll(amount);
  }

  @Override public 
  void keyPress() {
    this.slider.keyPress();
  }
}


// Submit button (submits and cancels)
class SubmitFormField extends FormField {
  class SubmitButton extends RectangleButton {
    SubmitButton(float xi, float yi, float xf, float yf) {
      super(xi, yi, xf, yf);
      this.roundness = 0;
      this.raised_body = true;
      this.raised_border = true;
      this.adjust_for_text_descent = true;
    }
     public void hover() {
    }
     public void dehover() {
    }
     public void click() {
    }
     public void release() {
      if (this.hovered) {
        SubmitFormField.this.submitted = true;
      }
    }
  }

  protected SubmitButton button = new SubmitButton(0, 0, 0, 30);
  protected boolean submitted = false;
  protected boolean submit_button = true;

  SubmitFormField(String message) {
    this(message, true);
  }
  SubmitFormField(String message, boolean submit_button) {
    super(message);
    this.button.message = message;
    this.button.show_message = true;
    this.submit_button = submit_button;
  }

   public void updateWidthDependencies() {
    textSize(this.button.text_size);
    float desiredWidth = textWidth(this.button.message + "  ");
    if (desiredWidth > this.field_width) {
      this.button.setLocation(0, 0, this.field_width, 30);
    }
    else {
      this.button.setLocation(0.5f * (this.field_width - desiredWidth), 0,
        0.5f * (this.field_width + desiredWidth), 30);
    }
  }

   public float getHeight() {
    return this.button.yf - this.button.yi;
  }

   public String getValue() {
    return this.message;
  }
  @Override public 
  void setValue(String newValue) {
    if (isBoolean(newValue)) {
      this.submit_button = toBoolean(newValue);
    }
  }

   public FormFieldSubmit update(int millis) {
    this.button.update(millis);
    if (this.submitted) {
      this.submitted = false;
      if (this.submit_button) {
        return FormFieldSubmit.SUBMIT;
      }
      else {
        return FormFieldSubmit.CANCEL;
      }
    }
    return FormFieldSubmit.NONE;
  }

   public void mouseMove(float mX, float mY) {
    this.button.mouseMove(mX, mY);
  }

   public void mousePress() {
    this.button.mousePress();
  }

   public void mouseRelease() {
    this.button.mouseRelease();
  }

   public void scroll(int amount) {
  }

   public void keyPress() {}
   public void keyRelease() {}
   public void submit() {}
}


//class ButtonFormField extends



abstract class Form {
  class CancelButton extends RectangleButton {
    CancelButton(float xi, float yi, float xf, float yf) {
      super(xi, yi, xf, yf);
      this.roundness = 0;
      this.setColors(color(170), color(240, 30, 30), color(255, 60, 60), color(180, 0, 0), color(0));
      this.color_stroke = color(0, 1);
    }
    @Override public 
    void drawButton() {
      super.drawButton();
      stroke(0);
      strokeWeight(1.5f);
      float offset = 0.05f * this.button_width();
      line(this.xi + offset, this.yi + offset, this.xf - offset, this.yf - offset);
      line(this.xi + offset, this.yf - offset, this.xf - offset, this.yi + offset);
    }
     public void hover() {
    }
     public void dehover() {
    }
     public void click() {
    }
     public void release() {
      if (this.hovered) {
        Form.this.cancelForm();
      }
    }
  }

  protected float xi = 0;
  protected float yi = 0;
  protected float xf = 0;
  protected float yf = 0;
  protected boolean hovered = false;
  protected CancelButton cancel;

  protected ScrollBar scrollbar = new ScrollBar(0, 0, 0, 0, true);
  protected float scrollbar_max_width = 60;
  protected float scrollbar_min_width = 30;

  protected ArrayList<FormField> fields = new ArrayList<FormField>();
  protected float fieldCushion = 20;
  protected float yStart = 0;

  protected String text_title_ref = null;
  protected String text_title = null;
  protected float title_size = 22;

  protected int color_background = color(210);
  protected int color_header = color(170);
  protected int color_stroke = color(0);
  protected int color_title = color(0);

  protected boolean draggable = false;
  protected boolean hovered_header = false;
  protected boolean dragging = false;
  protected float dragX = 0;
  protected float dragY = 0;

  Form() {
    this(0, 0, 0, 0);
  }
  Form(float xi, float yi, float xf, float yf) {
    this.setLocation(xi, yi, xf, yf);
  }

   public void cancelButton() {
    textSize(this.title_size);
    this.cancelButton(textAscent() + textDescent() + 1);
  }
   public void cancelButton(float size) {
    this.cancel = new CancelButton(this.xf - size, this.yi + 1, this.xf, this.yi + size);
    this.refreshTitle();
  }

   public float form_width() {
    return this.xf - this.xi;
  }
   public float form_height() {
    return this.yf - this.yi;
  }

   public void setLocation(float xi, float yi, float xf, float yf) {
    this.xi = xi;
    this.yi = yi;
    this.xf = xf;
    this.yf = yf;
    this.refreshTitle();
    for (FormField field : this.fields) {
      field.setWidth(this.xf - this.xi - 3 - this.scrollbar.bar_size);
    }
  }

   public void moveForm(float xMove, float yMove) {
    this.xi += xMove;
    this.yi += yMove;
    this.xf += xMove;
    this.yf += yMove;
    this.scrollbar.move(xMove, yMove);
    if (this.cancel != null) {
      this.cancel.moveButton(xMove, yMove);
    }
    this.yStart += yMove;
    if (this.xi >= width || this.xf <= 0 || (this.cancel != null && this.xf <= this.cancel.button_width())
      || this.yi >= height || this.yStart <= 0) {
      this.toCenter();
      this.dragging = false;
    }
  }

   public void toCenter() {
    float xMove = 0.5f * (width - this.form_width()) - this.xi;
    float yMove = 0.5f * (height - this.form_height()) - this.yi;
    this.moveForm(xMove, yMove);
  }

   public void refreshTitle() {
    this.setTitleText(this.text_title_ref);
  }
   public void setTitleSize(float title_size) {
    this.title_size = title_size;
    this.refreshTitle();
    if (this.cancel != null) {
      textSize(this.title_size);
      if (this.cancel.button_height() > textAscent() + textDescent() + 1) {
        this.cancelButton();
      }
    }
  }
   public void setTitleText(String title) {
    this.text_title_ref = title;
    float scrollbar_width = min(this.scrollbar_max_width, 0.08f * (this.xf - this.xi));
    scrollbar_width = max(this.scrollbar_min_width, scrollbar_width);
    scrollbar_width = min(0.08f * (this.xf - this.xi), scrollbar_width);
    if (title == null) {
      this.text_title = null;
      this.scrollbar.setLocation(this.xf - scrollbar_width, this.yi, this.xf, this.yf);
      this.yStart = this.yi + 1;
    }
    else {
      this.text_title = "";
      textSize(this.title_size);
      for (int i = 0; i < title.length(); i++) {
        char nextChar = title.charAt(i);
        if (textWidth(this.text_title + nextChar) < this.xf - this.xi - 3) {
          this.text_title += nextChar;
        }
        else {
          break;
        }
      }
      this.yStart = this.yi + 2 + textAscent() + textDescent();
      this.scrollbar.setLocation(xf - scrollbar_width, this.yStart, this.xf, this.yf);
    }
  }

   public void setFieldCushion(float fieldCushion) {
    this.fieldCushion = fieldCushion;
    this.refreshScrollbar();
  }


   public void addField(FormField field) {
    field.setWidth(this.xf - this.xi - 3 - this.scrollbar.bar_size);
    this.fields.add(field);
    this.refreshScrollbar();
  }

   public void removeField(int index) {
    if (index < 0 || index >= this.fields.size()) {
      return;
    }
    this.fields.remove(index);
    this.refreshScrollbar();
  }

   public void refreshScrollbar() {
    float currY = this.yStart;
    for (int i = 0; i < this.fields.size(); i++) {
      currY += this.fields.get(i).getHeight();
      if (i > 0) {
        currY += this.fieldCushion;
      }
      if (currY + 2 > this.yf) {
        this.scrollbar.updateMaxValue(this.fields.size());
        return;
      }
    }
    this.scrollbar.updateMaxValue(0);
  }


   public void update(int millis) {
    rectMode(CORNERS);
    fill(this.color_background);
    stroke(this.color_stroke);
    strokeWeight(1);
    rect(this.xi, this.yi, this.xf, this.yf);
    if (this.text_title_ref != null) {
      fill(this.color_header);
      textSize(this.title_size);
      rect(this.xi, this.yi, this.xf, this.yi + textAscent() + textDescent() + 1);
      fill(this.color_title);
      textAlign(CENTER, TOP);
      float center = this.xi + 0.5f * (this.xf - this.xi);
      if (this.cancel != null) {
        center -= 0.5f * this.cancel.button_width();
      }
      text(this.text_title, center, this.yi + 1);
    }
    if (this.cancel != null) {
      this.cancel.update(millis);
    }
    float currY = this.yStart;
    translate(this.xi + 1, 0);
    for (int i = PApplet.parseInt(floor(this.scrollbar.value)); i < this.fields.size(); i++) {
      if (currY + this.fields.get(i).getHeight() > this.yf) {
        break;
      }
      translate(0, currY);
      FormFieldSubmit submit = this.fields.get(i).update(millis);
      if (submit == FormFieldSubmit.SUBMIT) {
        this.submitForm();
      }
      else if (submit == FormFieldSubmit.CANCEL) {
        this.cancelForm();
      }
      translate(0, -currY);
      currY += this.fields.get(i).getHeight() + this.fieldCushion;
    }
    translate(-this.xi - 1, 0);
    if (this.scrollbar.maxValue != this.scrollbar.minValue) {
      this.scrollbar.update(millis);
    }
  }

   public void mouseMove(float mX, float mY) {
    this.scrollbar.mouseMove(mX, mY);
    if (this.cancel != null) {
      this.cancel.mouseMove(mX, mY);
    }
    if (this.dragging) {
      this.moveForm(mouseX - this.dragX, mouseY - this.dragY);
      this.dragX = mouseX;
      this.dragY = mouseY;
    }
    this.hovered_header = false;
    if (mX > this.xi && mX < this.xf && mY > this.yi && mY < this.yf) {
      this.hovered = true;
      if (this.text_title_ref != null) {
        if (mY < this.yStart) {
          if (this.cancel == null || !this.cancel.hovered) {
            this.hovered_header = true;
          }
        }
      }
      mX -= this.xi + 1;
      mY -= this.yStart;
      float currY = this.yStart;
      for (int i = PApplet.parseInt(floor(this.scrollbar.value)); i < this.fields.size(); i++) {
        if (currY + this.fields.get(i).getHeight() > this.yf) {
          break;
        }
        this.fields.get(i).mouseMove(mX, mY);
        mY -= this.fields.get(i).getHeight() + this.fieldCushion;
        currY += this.fields.get(i).getHeight() + this.fieldCushion;
      }
    }
    else {
      this.hovered = false;
    }
  }

   public void mousePress() {
    this.scrollbar.mousePress();
    if (this.cancel != null) {
      this.cancel.mousePress();
    }
    for (FormField field : this.fields) {
      field.mousePress();
    }
    if (this.hovered_header) {
      this.dragging = true;
      this.dragX = mouseX;
      this.dragY = mouseY;
    }
  }

   public void mouseRelease() {
    this.scrollbar.mouseRelease();
    if (this.cancel != null) {
      this.cancel.mouseRelease();
    }
    for (FormField field : this.fields) {
      field.mouseRelease();
    }
    this.dragging = false;
  }

   public void scroll(int amount) {
    if (this.hovered) {
      this.scrollbar.increaseValue(amount);
    }
    for (FormField field : this.fields) {
      field.scroll(amount);
    }
  }

   public void keyPress() {
    for (FormField field : this.fields) {
      field.keyPress();
    }
  }

   public void keyRelease() {
    for (FormField field : this.fields) {
      field.keyRelease();
    }
  }


   public void submitForm() {
    for (FormField field : this.fields) {
      field.submit();
    }
    this.submit();
  }

   public void cancelForm() {
    this.cancel();
  }

   public abstract void submit();
   public abstract void cancel();
}
// default to if file does not exist create file
 public void mkFile(String path) {
  mkFile(path, false);
}
 public void mkFile(String path, boolean replace) {
  mkFile(Paths.get(sketchPath(path)), replace);
}
 public void mkFile(Path p, boolean replace) {
  if (!Files.exists(p)) {
    try {
      Files.createFile(p);
    } catch (IOException e) {
      println("ERROR: IOException at mkFile(" + p + ")");
    }
  }
  else if (replace && !Files.isDirectory(p)) {
    deleteFile(p);
    try {
      Files.createFile(p);
    } catch (IOException e) {
      println("ERROR: IOException at mkFile(" + p + ")");
    }
  }
}

// delete file
 public void deleteFile(String path) {
  deleteFile(Paths.get(sketchPath(path)));
}
 public void deleteFile(Path p) {
  try {
    Files.deleteIfExists(p);
  } catch(IOException e) {
    println("ERROR: IOException at deleteFile(" + p + ")");
  }
}

// list all entries in directory
 public ArrayList<Path> listEntries(String path) {
  return listEntries(Paths.get(sketchPath(path)));
}
 public ArrayList<Path> listEntries(Path p) {
  ArrayList<Path> entries = new ArrayList<Path>();
  try {
    if (Files.isDirectory(p)) {
      Files.list(p).forEach(entry -> entries.add(entry));
    }
    else {
      println("ERROR: Not a directory at listEntries(" + p + ")");
    }
  } catch(IOException e) {
    println("ERROR: IOException at listEntries(" + p + ")");
  }
  return entries;
}

// list all files in directory
 public ArrayList<Path> listFiles(String path) {
  return listFiles(Paths.get(sketchPath(path)));
}
 public ArrayList<Path> listFiles(Path p) {
  ArrayList<Path> files = listEntries(p);
  for (int i = 0; i < files.size(); i++) {
    if (Files.isDirectory(files.get(i))) {
      files.remove(i);
      i--;
    }
  }
  return files;
}

// list all folder in directory
 public ArrayList<Path> listFolders(String path) {
  return listFolders(Paths.get(sketchPath(path)));
}
 public ArrayList<Path> listFolders(Path p) {
  ArrayList<Path> folders = listEntries(p);
  for (int i = 0; i < folders.size(); i++) {
    if (!Files.isDirectory(folders.get(i))) {
      folders.remove(i);
      i--;
    }
  }
  return folders;
}

// default to if folder does not exist create folder
 public void mkdir(String path) {
  mkdir(path, false);
}
 public void mkdir(String path, boolean replace) {
  mkdir(path, replace, false);
}
 public void mkdir(String path, boolean replace, boolean replace_file) {
  mkdir(Paths.get(sketchPath(path)), replace, replace_file);
}
 public void mkdir(Path p, boolean replace, boolean replace_file) {
  if (!Files.exists(p)) {
    try {
      Files.createDirectory(p);
    } catch (IOException e) {
      println("ERROR: IOException at mkdir(" + p + ")");
    }
  }
  else if (replace && Files.isDirectory(p)) {
    deleteFolder(p);
    try {
      Files.createDirectory(p);
    } catch (IOException e) {
      println("ERROR: IOException at mkdir(" + p + ")");
    }
  }
  else if ((replace || replace_file) && !Files.isDirectory(p)) {
    deleteFile(p);
    try {
      Files.createDirectory(p);
    } catch (IOException e) {
      println("ERROR: IOException at mkdir(" + p + ")");
    }
  }
}

// recursively deletes folder
 public void deleteFolder(String path) {
  deleteFolder(Paths.get(sketchPath(path)));
}
 public void deleteFolder(Path p) {
  if (Files.isDirectory(p)) {
    for (Path filePath : listFiles(p)) {
      deleteFile(filePath);
    }
    for (Path folderPath : listFolders(p)) {
      deleteFolder(folderPath);
    }
    try {
      Files.delete(p);
    } catch(IOException e) {
      println("ERROR: IOException at deleteFolder(" + p + ")");
    }
  }
  else {
    deleteFile(p);
  }
}


// Entry exists
 public boolean entryExists(String path) {
  return entryExists(Paths.get(sketchPath(path)));
}
 public boolean entryExists(Path p) {
  return Files.exists(p);
}

// File exists
 public boolean fileExists(String path) {
  return fileExists(Paths.get(sketchPath(path)));
}
 public boolean fileExists(Path p) {
  return (Files.exists(p) && !Files.isDirectory(p));
}

// Folder exists
 public boolean folderExists(String path) {
  return folderExists(Paths.get(sketchPath(path)));
}
 public boolean folderExists(Path p) {
  return (Files.exists(p) && Files.isDirectory(p));
}
enum ProgramState {
  INITIAL_INTERFACE, EXITING, ENTERING_MAINMENU, MAINMENU_INTERFACE;
}


class Global {
  // Program
  private InterfaceLNZ menu;
  private ProgramState state = ProgramState.INITIAL_INTERFACE;
  private int timer_exiting = Constants.exit_delay;
  private Images images;
  private Sounds sounds;
  private Options options = new Options();
  // FPS
  private int lastFrameTime = millis();
  private float lastFPS = Constants.maxFPS;
  private int frameCounter = frameCount;
  private int timer_FPS = Constants.frameUpdateTime;
  // Colors
  private int color_background = color(180);
  // Profile
  private Profile profile;

  Global(LNZ thisInstance) {
    this.images = new Images();
    this.sounds = new Sounds(thisInstance);
  }

   public int frame() {
    int elapsed = millis() - this.lastFrameTime;
    this.lastFrameTime = millis();
    return elapsed;
  }

   public void exit() {
    this.state = ProgramState.EXITING;
  }
}


class Options { // global options (profile independent)
  private String default_profile_name = "";

  Options() {
    this.loadOptions();
  }

   public void loadOptions() {
    String[] lines = loadStrings(sketchPath("data/options.lnz"));
    if (lines == null) {
      return;
    }
    for (String line : lines) {
      String[] data = split(line, ':');
      if (data.length < 2) {
        continue;
      }
      switch(data[0]) {
        case "default_profile_name":
          this.default_profile_name = trim(data[1]);
          break;
        default:
          break;
      }
    }
  }

   public void save() {
    this.saveOptions();
  }
   public void saveOptions() {
    PrintWriter file = createWriter(sketchPath("data/options.lnz"));
    file.println("default_profile_name: " + this.default_profile_name);
    file.flush();
    file.close();
  }
}
 public int ccolor(int gray) {
  return ccolor(gray, gray, gray, 255);
}
 public int ccolor(int gray, int a) {
  return ccolor(gray, gray, gray, a);
}
 public int ccolor(int r, int g, int b) {
  return ccolor(r, g, b, 255);
}
 public int ccolor(int r, int g, int b, int a) {
  int max = 256;
  return max*max*max*a + max*max*r + max*g + b;
  //return ((255 - a) << 32) | (r << 16) | (g << 8) | b;
}


class Images {
  private HashMap<String, PImage> imgs = new HashMap<String, PImage>();
  private String basePath = sketchPath("data/images/");

  Images() {}

   public PImage getImage(String filePath) {
    if (this.imgs.containsKey(filePath)) {
      return this.imgs.get(filePath);
    }
    else {
      PImage img = loadImage(this.basePath + filePath);
      if (img == null) {
        println("ERROR: Missing image " + filePath + ".");
        return this.getBlackPixel();
      }
      else {
        this.imgs.put(filePath, img);
        return img;
      }
    }
  }

   public PImage getBlackPixel() {
    PImage img = new PImage(1, 1, RGB);
    img.loadPixels();
    img.pixels[0] = color(0);
    img.updatePixels();
    return img;
  }

   public PImage getTransparentPixel() {
    PImage img = new PImage(1, 1, ARGB);
    img.loadPixels();
    img.pixels[0] = color(255, 0);
    img.updatePixels();
    return img;
  }
}



 public PImage getCurrImage() {
  PImage img = createImage(width, height, ARGB);
  img.loadPixels();
  loadPixels();
  for (int i = 0; i < width; i++) {
    for (int j = 0; j < height; j++) {
      int index = i + j * width;
      img.pixels[index] = pixels[index];
    }
  }
  img.updatePixels();
  return img;
}
abstract class FormLNZ extends Form {
  protected boolean canceled = false;
  protected float shadow_distance = 10;
  protected PImage img;

  FormLNZ(float xi, float yi, float xf, float yf) {
    super(xi, yi, xf, yf);
    this.img = getCurrImage();
    this.cancelButton();
    this.draggable = true;
  }

  @Override public 
  void update(int millis) {
    rectMode(CORNERS);
    fill(0);
    //rect(0, 0, width, height);
    imageMode(CORNER);
    image(this.img, 0, 0);
    fill(0, 150);
    stroke(0, 1);
    translate(shadow_distance, shadow_distance);
    rect(this.xi, this.yi, this.xf, this.yf);
    translate(-shadow_distance, -shadow_distance);
    super.update(millis);
  }

   public void cancel() {
    this.canceled = true;
  }
}


abstract class InterfaceLNZ {

  class OptionsForm extends FormLNZ {
    OptionsForm() {
      super(Constants.OptionsForm_widthOffset, Constants.OptionsForm_heightOffset,
        width - Constants.OptionsForm_widthOffset, height - Constants.OptionsForm_heightOffset);
      this.setTitleText("Options");
      this.setTitleSize(20);
      this.color_background = color(250, 250, 180);
      this.color_header = color(180, 180, 50);
      if (global.profile == null) {
        this.canceled = true;
        return;
      }
      // add fields for profile options
      this.addField(new SubmitFormField("Save Options"));
    }

     public void submit() {
      // set profile options
      global.profile.save();
      this.canceled = true;
    }
  }

  protected FormLNZ form = null;

  InterfaceLNZ() {
  }

   public void LNZ_update(int millis) {
    if (this.form == null) {
      this.update(millis);
    }
    else {
      this.form.update(millis);
      if (this.form.canceled) {
        this.form = null;
      }
    }
  }

   public void LNZ_mouseMove(float mX, float mY) {
    if (this.form == null) {
      this.mouseMove(mX, mY);
    }
    else {
      this.form.mouseMove(mX, mY);
    }
  }

   public void LNZ_mousePress() {
    if (this.form == null) {
      this.mousePress();
    }
    else {
      this.form.mousePress();
    }
  }

   public void LNZ_mouseRelease() {
    if (this.form == null) {
      this.mouseRelease();
    }
    else {
      this.form.mouseRelease();
    }
  }

   public void LNZ_scroll(int amount) {
    if (this.form == null) {
      this.scroll(amount);
    }
    else {
      this.form.scroll(amount);
    }
  }

   public void LNZ_keyPress() {
    if (this.form == null) {
      this.keyPress();
    }
    else {
      this.form.keyPress();
    }
  }

   public void LNZ_keyRelease() {
    if (this.form == null) {
      this.keyRelease();
    }
    else {
      this.form.keyRelease();
    }
  }

   public abstract void update(int millis);
   public abstract void mouseMove(float mX, float mY);
   public abstract void mousePress();
   public abstract void mouseRelease();
   public abstract void keyPress();
   public abstract void keyRelease();
   public abstract void scroll(int amount);
}



class InitialInterface extends InterfaceLNZ {

  abstract class InitialInterfaceButton extends RectangleButton {
    InitialInterfaceButton(float yi, float yf) {
      super(Constants.initialInterface_size - Constants.initialInterface_buttonWidth -
        Constants.initialInterface_buttonGap, yi, Constants.initialInterface_size -
        Constants.initialInterface_buttonGap, yf);
      this.setColors(color(0, 100, 30, 200), color(0, 129, 50, 150), color(0, 129, 50, 190), color(0, 129, 50, 230), color(255));
      this.noStroke();
      this.show_message = true;
      this.text_size = 15;
    }

     public void hover() {
      global.sounds.trigger("interfaces/buttonOn1");
      InitialInterface.this.logo.release();
    }
     public void dehover() {
      this.clicked = false;
    }
     public void click() {
      InitialInterface.this.logo.release();
    }
     public void release() {
      this.stayDehovered();
      InitialInterface.this.logo.release();
      InitialInterface.this.logo.release();
    }
  }

  class InitialInterfaceButton1 extends InitialInterfaceButton {
    InitialInterfaceButton1(float buttonHeight) {
      super(Constants.initialInterface_buttonGap,
        Constants.initialInterface_buttonGap + buttonHeight);
      this.message = "Launch";
    }

    @Override public 
    void release() {
      super.release();
      global.sounds.trigger("interfaces/buttonClick4");
      global.state = ProgramState.ENTERING_MAINMENU;
      background(global.color_background);
      surface.setSize(displayWidth, displayHeight);
      surface.setLocation(0, 0);
      background(30, 0, 0);
      global.menu = null;
    }
  }

  class InitialInterfaceButton2 extends InitialInterfaceButton {
    InitialInterfaceButton2(float buttonHeight) {
      super(2 * Constants.initialInterface_buttonGap + buttonHeight,
        2 * Constants.initialInterface_buttonGap + 2 * buttonHeight);
      this.message = "Uninstall";
    }

    @Override public 
    void release() {
      super.release();
      global.sounds.trigger("interfaces/buttonClick3");
      InitialInterface.this.form = new InitialInterfaceForm("Uninstall Game", "Just delete it ya dip");
    }
  }

  class InitialInterfaceButton3 extends InitialInterfaceButton {
    InitialInterfaceButton3(float buttonHeight) {
      super(3 * Constants.initialInterface_buttonGap + 2 * buttonHeight,
        3 * Constants.initialInterface_buttonGap + 3 * buttonHeight);
      this.message = "Reset\nGame";
    }

    @Override public 
    void release() {
      super.release();
      global.sounds.trigger("interfaces/buttonClick3");
      InitialInterface.this.form = new InitialInterfaceForm("Reset Game", "Why would you want to reinstall a test version?");
    }
  }

  class InitialInterfaceButton4 extends InitialInterfaceButton {
    InitialInterfaceButton4(float buttonHeight) {
      super(4 * Constants.initialInterface_buttonGap + 3 * buttonHeight,
        4 * Constants.initialInterface_buttonGap + 4 * buttonHeight);
      this.message = "Version\nHistory";
    }

    @Override public 
    void release() {
      super.release();
      global.sounds.trigger("interfaces/buttonClick3");
      InitialInterface.this.form = new InitialInterfaceForm("Version History", Constants.version_history);
    }
  }

  class InitialInterfaceButton5 extends InitialInterfaceButton {
    InitialInterfaceButton5(float buttonHeight) {
      super(5 * Constants.initialInterface_buttonGap + 4 * buttonHeight,
        5 * Constants.initialInterface_buttonGap + 5 * buttonHeight);
      this.message = "Exit";
    }

    @Override public 
    void release() {
      super.release();
      global.sounds.trigger("interfaces/buttonClick3");
      global.exit();
    }
  }

  class LogoImageButton extends ImageButton {
    LogoImageButton() {
      super(global.images.getImage("logo.png"), 0, 0, 400, 400);
    }

     public void hover() {
    }
     public void dehover() {
    }
     public void click() {
      this.color_tint = color(255, 200, 200);
    }
     public void release() {
      this.color_tint = color(255);
    }
  }

  class InitialInterfaceForm extends FormLNZ {
    InitialInterfaceForm(String title, String message) {
      super(0.5f * Constants.initialInterface_size - 120, 0.5f * Constants.initialInterface_size - 120,
        0.5f * Constants.initialInterface_size + 120, 0.5f * Constants.initialInterface_size + 120);
      this.setTitleText(title);
      this.setTitleSize(18);
      this.color_background = color(180, 250, 180);
      this.color_header = color(30, 170, 30);
      this.addField(new SpacerFormField(0));
      this.addField(new TextBoxFormField(message, 120));
      this.addField(new SubmitFormField("  Ok  "));
    }
     public void submit() {
      this.canceled = true;
    }
  }

  private InitialInterfaceButton[] buttons = new InitialInterfaceButton[5];
  private LogoImageButton logo = new LogoImageButton();

  InitialInterface() {
    super();
    float buttonHeight = (Constants.initialInterface_size - (this.buttons.length + 1) *
      Constants.initialInterface_buttonGap) / this.buttons.length;
    this.buttons[0] = new InitialInterfaceButton1(buttonHeight);
    this.buttons[1] = new InitialInterfaceButton2(buttonHeight);
    this.buttons[2] = new InitialInterfaceButton3(buttonHeight);
    this.buttons[3] = new InitialInterfaceButton4(buttonHeight);
    this.buttons[4] = new InitialInterfaceButton5(buttonHeight);
  }

   public void update(int millis) {
    this.logo.update(millis);
    for (InitialInterfaceButton button : this.buttons) {
      button.update(millis);
    }
  }

   public void mouseMove(float mX, float mY) {
    this.logo.mouseMove(mX, mY);
    for (InitialInterfaceButton button : this.buttons) {
      button.mouseMove(mX, mY);
    }
  }

   public void mousePress() {
    this.logo.mousePress();
    for (InitialInterfaceButton button : this.buttons) {
      button.mousePress();
    }
  }

   public void mouseRelease() {
    this.logo.mouseRelease();
    for (InitialInterfaceButton button : this.buttons) {
      button.mouseRelease();
    }
  }

   public void scroll(int amount) {}
   public void keyPress() {}
   public void keyRelease() {}
}

class MainMenuInterface extends InterfaceLNZ {

  abstract class MainMenuGrowButton extends RippleRectangleButton {
    protected float xf_grow;
    protected float ratio; // ratio when shrunk (can have it be > 1 to make it shrink when hovered)
    protected float grow_speed = 0.7f; // pixels / ms
    protected PImage icon;
    protected boolean collapsing = false;

    MainMenuGrowButton(float xi, float yi, float xf, float yf, float ratio) {
      super(xi, yi, xf * ratio, yf);
      this.xf_grow = xf;
      this.ratio = ratio;
      this.maxRippleDistance = xf - xi;
      this.icon = this.getIcon();
      this.text_size = 24;
      this.noStroke();
      this.setColors(color(170), color(1, 0), color(150, 90, 90, 150), color(240, 180, 180), color(255));
      this.refreshColor();
    }

     public abstract PImage getIcon();

    @Override public 
    void update(int millis) {
      int timeElapsed = millis - this.lastUpdateTime;
      float pixelsMoved = timeElapsed * this.grow_speed;
      super.update(millis);
      float pixelsLeft = 0;
      int pixelsToMove = 0;
      if (this.collapsing) {
        if (this.hovered) {
          pixelsLeft = this.xf_grow - this.xf;
          pixelsToMove = PApplet.parseInt(ceil(min(pixelsLeft, pixelsMoved)));
          if (pixelsToMove > 0) {
            this.stretchButton(pixelsToMove, RIGHT);
          }
          else {
            this.collapsing = false;
            this.refreshColor();
          }
        }
        else {
          pixelsLeft = this.xf_grow * this.ratio - this.xf;
          pixelsToMove = PApplet.parseInt(floor(max(pixelsLeft, -pixelsMoved)));
          if (pixelsToMove < 0) {
            this.stretchButton(pixelsToMove, RIGHT);
          }
          else {
            this.collapsing = false;
            this.refreshColor();
          }
        }
      }
      if (!this.hovered && !this.collapsing) {
        imageMode(CENTER);
        image(this.icon, this.xCenter(), this.yCenter(), this.button_width(), this.button_height());
      }
    }

     public void reset() {
      this.stretchButton(this.xf_grow * this.ratio - this.xf, RIGHT);
      this.collapsing = false;
      this.clicked = false;
      this.hovered = false;
      this.show_message = false;
      this.refreshColor();
    }

    @Override public 
    int fillColor() {
      if (this.collapsing) {
        if (this.clicked) {
          return this.color_click;
        }
        else {
          return this.color_hover;
        }
      }
      return super.fillColor();
    }

     public void hover() {
      this.collapsing = true;
      super.hover();
      this.show_message = true;
    }

     public void dehover() {
      this.collapsing = true;
      super.dehover();
      this.show_message = false;
      this.clicked = false;
      this.color_text = color(255);
    }

     public void click() {
      super.click();
      this.color_text = color(0);
    }

     public void release() {
      super.release();
      this.color_text = color(255);
      this.reset();
    }
  }


  class MainMenuGrowButton1 extends MainMenuGrowButton {
    MainMenuGrowButton1() {
      super(0, height - 60, 200, height, 0.3f);
      this.message = "Exit";
    }
     public PImage getIcon() {
      return global.images.getImage("icons/power.png");
    }

    @Override public 
    void release() {
      super.release();
      global.exit();
    }
  }

  class MainMenuGrowButton2 extends MainMenuGrowButton {
    MainMenuGrowButton2() {
      super(0, height - 160, 200, height - 100, 0.3f);
      this.message = "Options";
    }
     public PImage getIcon() {
      return global.images.getImage("icons/gear.png");
    }

    @Override public 
    void release() {
      super.release();
      MainMenuInterface.this.form = new OptionsForm();
    }
  }

  class MainMenuGrowButton3 extends MainMenuGrowButton {
    MainMenuGrowButton3() {
      super(0, height - 260, 200, height - 200, 0.3f);
      this.message = "Achievements";
    }
     public PImage getIcon() {
      return global.images.getImage("icons/achievements.png");
    }

    @Override public 
    void release() {
      super.release();
      MainMenuInterface.this.form = new AchievementsForm();
    }
  }

  class MainMenuGrowButton4 extends MainMenuGrowButton {
    MainMenuGrowButton4() {
      super(0, height - 360, 200, height - 300, 0.3f);
      this.message = "Map Editor";
    }
     public PImage getIcon() {
      return global.images.getImage("icons/map.png");
    }

    @Override public 
    void update(int millis) {
      super.update(millis);
    }

    @Override public 
    void release() {
      super.release();
    }
  }


  class NewProfileForm extends FormLNZ {
    NewProfileForm() {
      super(0.5f * (width - Constants.newProfileForm_width), 0.5f * (height - Constants.newProfileForm_height),
        0.5f * (width + Constants.newProfileForm_width), 0.5f * (height + Constants.newProfileForm_height));
      this.setTitleText("New Profile");
      this.setTitleSize(18);
      this.setFieldCushion(0);
      this.color_background = color(250, 180, 180);
      this.color_header = color(180, 50, 50);

      StringFormField input = new StringFormField("", "Enter profile name");
      input.input.typing = true;
      MessageFormField error = new MessageFormField("");
      error.text_color = color(150, 20, 20);
      error.setTextSize(18);
      CheckboxFormField checkbox = new CheckboxFormField("Save as default profile  ");
      checkbox.setTextSize(16);

      this.addField(new SpacerFormField(20));
      this.addField(input);
      this.addField(error);
      this.addField(new SpacerFormField(20));
      this.addField(checkbox);
      this.addField(new SpacerFormField(8));
      this.addField(new SubmitFormField("Create New Profile"));
    }

     public void submit() {
      String possibleProfileName = this.fields.get(1).getValue();
      int errorcode = isValidProfileName(possibleProfileName);
      switch(errorcode) {
        case 0:
          Profile p = new Profile(possibleProfileName);
          p.save();
          global.profile = p;
          this.canceled = true;
          if (this.fields.get(4).getValue().equals("true")) {
            global.options.default_profile_name = possibleProfileName;
            global.options.save();
          }
          break;
        case 1:
          this.fields.get(2).setValue("Enter a profile name.");
          break;
        case 2:
          this.fields.get(2).setValue("Profile name must start with a letter.");
          break;
        case 3:
          this.fields.get(2).setValue("Profile name must be alphanumeric.");
          break;
        case 4:
          this.fields.get(2).setValue("That profile already exists.");
          break;
        default:
          this.fields.get(2).setValue("An unknown error occured.");
          break;
      }
    }

    @Override public 
    void cancel() {
      this.fields.get(2).setValue("You must create a profile");
    }
  }


  class AchievementsForm extends FormLNZ {
    AchievementsForm() {
      super(Constants.AchievementsForm_widthOffset, Constants.AchievementsForm_heightOffset,
        width - Constants.AchievementsForm_widthOffset, height - Constants.AchievementsForm_heightOffset);
      this.setTitleText("Achievements");
      this.setTitleSize(20);
      this.color_background = color(180, 250, 250);
      this.color_header = color(50, 180, 180);
      if (global.profile == null) {
        this.canceled = true;
        return;
      }
      // add fields for profile achievements
    }

     public void submit() {
    }
  }


  class backgroundImageThread extends Thread {
    private PImage img = createImage(width, height, ARGB);
    private float distance_threshhold = 150;
    private float mX = mouseX;
    private float mY = mouseY;

    backgroundImageThread() {
      super("backgroundImageThread");
    }

    @Override public 
    void run() {
      DImg dimg = new DImg(this.img);
      dimg.makeTransparent(255);
      dimg.addImagePercent(global.images.getImage("hillary.png"), 0, 0, 1, 1);
      dimg.brightenGradient(0.02f, this.distance_threshhold, this.mX, this.mY);
      this.img = dimg.img;
    }
  }


  private MainMenuGrowButton[] growButtons = new MainMenuGrowButton[4];
  private PImage backgroundImage;
  backgroundImageThread thread = new backgroundImageThread();

  MainMenuInterface() {
    super();
    this.backgroundImage = createImage(width, height, RGB);
    this.growButtons[0] = new MainMenuGrowButton1();
    this.growButtons[1] = new MainMenuGrowButton2();
    this.growButtons[2] = new MainMenuGrowButton3();
    this.growButtons[3] = new MainMenuGrowButton4();
    this.loadProfile();
  }

   public void loadProfile() {
    if (!this.loadProfile(global.options.default_profile_name)) {
      this.form = new NewProfileForm();
    }
  }
  // returns true if profile loaded
   public boolean loadProfile(String profile_name) {
    mkdir("data/profiles", false, true);
    if (!folderExists("data/profiles/" + profile_name.toLowerCase())) {
      println("Profile: No profile folder exists with name " + profile_name + ".");
      return false;
    }
    if (!fileExists("data/profiles/" + profile_name.toLowerCase() + "/profile.lnz")) {
      println("ERROR: Profile file missing for " + profile_name + ".");
      return false;
    }
    global.profile = readProfile(sketchPath("data/profiles/" + profile_name.toLowerCase() + "/profile.lnz"));
    global.profile.display_name = profile_name;
    return true;
  }

   public void update(int millis) {
    // draw background
    imageMode(CORNER);
    image(this.backgroundImage, 0, 0);
    // update elements
    for (MainMenuGrowButton button : this.growButtons) {
      button.update(millis);
    }
    // restart thread
    if (!this.thread.isAlive()) {
      this.backgroundImage = this.thread.img;
      this.thread = new backgroundImageThread();
      this.thread.start();
    }
  }

   public void mouseMove(float mX, float mY) {
    for (MainMenuGrowButton button : this.growButtons) {
      button.mouseMove(mX, mY);
    }
  }

   public void mousePress() {
    for (MainMenuGrowButton button : this.growButtons) {
      button.mousePress();
    }
  }

   public void mouseRelease() {
    for (MainMenuGrowButton button : this.growButtons) {
      button.mouseRelease();
    }
  }

   public void scroll(int amount) {}
   public void keyPress() {}
   public void keyRelease() {}
}

class Profile {
  private String display_name = "";

  Profile() {
  }
  Profile(String s) {
    this.display_name = s;
  }

   public void save() {
    PrintWriter file = createWriter(sketchPath("data/profiles/" + this.display_name.toLowerCase() + "/profile.lnz"));
    file.println("display_name: " + this.display_name);
    file.flush();
    file.close();
  }
}


 public Profile readProfile(String path) {
  String[] lines = loadStrings(path);
  Profile p = new Profile();
  if (lines == null) {
    println("ERROR: Reading profile file but path " + path + " doesn't exist.");
    return p;
  }
  for (String line : lines) {
    String[] data = split(line, ':');
    if (data.length < 2) {
      continue;
    }
    switch(data[0]) {
      case "display_name":
        p.display_name = trim(data[1]);
        break;
      default:
        break;
    }
  }
  return p;
}


 public int isValidProfileName(String s) {
  if (s == null) {
    return 1;
  }
  else if (s.equals("")) {
    return 1;
  }
  for (int i = 0; i < s.length(); i++) {
    char c = s.charAt(i);
    if (i == 0 && !Character.isLetter(c)) {
      return 2;
    }
    else if (!Character.isLetterOrDigit(c)) {
      return 3;
    }
  }
  for (Path p : listEntries(sketchPath("data/profiles/"))) {
    String filename = p.getFileName().toString().toLowerCase();
    if (filename.equals(s.toLowerCase())) {
      return 4;
    }
  }
  return 0;
}
class Sounds {
  private Minim minim;
  private AudioOutput out;
  private HashMap<String, Sampler> soundEffects = new HashMap<String, Sampler>();
  private String basePath = sketchPath("data/sounds/");

  Sounds(LNZ thisInstance) {
    this.minim = new Minim(thisInstance);
    this.out = this.minim.getLineOut();
  }

   public void trigger(String soundPath) {
    if (this.soundEffects.containsKey(soundPath)) {
      this.soundEffects.get(soundPath).trigger();
    }
    else {
      String filePath = this.basePath + soundPath + ".wav";
      File f = new File(filePath);
      if (f.exists()) {
        Sampler s = new Sampler(filePath, 2, this.minim);
        s.patch(this.out);
        this.soundEffects.put(soundPath, s);
        s.trigger();
      }
      else {
        println("ERROR: Missing sound " + filePath + ".");
      }
    }
  }
}
// String to primitive casts
 public boolean isInt(String str) {
  try {
    int i = Integer.parseInt(str);
    return true;
  } catch(NumberFormatException e) {
    return false;
  }
}
 public int toInt(String str) {
  int i = -1;
  try {
    i = Integer.parseInt(str);
  } catch(NumberFormatException e) {}
  return i;
}

 public boolean isFloat(String str) {
  try {
    float i = Float.parseFloat(str);
    return true;
  } catch(NumberFormatException e) {
    return false;
  }
}
 public float toFloat(String str) {
  float i = -1;
  try {
    i = Float.parseFloat(str);
  } catch(NumberFormatException e) {}
  return i;
}

 public boolean isBoolean(String str) {
  if (str.equals(Boolean.toString(true)) || str.equals(Boolean.toString(false))) {
    return true;
  }
  else {
    return false;
  }
}
 public boolean toBoolean(String str) {
  if (str.equals(Boolean.toString(true))) {
    return true;
  }
  else {
    return false;
  }
}


// color functions
 public int brighten(int c) {
  return adjust_color_brightness(c, 1.05f);
}
 public int darken(int c) {
  return adjust_color_brightness(c, 0.95f);
}
 public int adjust_color_brightness(int c, float factor) {
  float r = constrain(factor * (c >> 16 & 0xFF), 0, 255);
  float g = constrain(factor * (c >> 8 & 0xFF), 0, 255);
  float b = constrain(factor * (c & 0xFF), 0, 255);
  return color(r, g, b, alpha(c));
}


  public void settings() { fullScreen(FX2D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "LNZ" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
