/* autogenerated by Processing revision 1281 on 2022-03-01 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.*;
import java.io.*;
import processing.javafx.*;
import ddf.minim.*;
import ddf.minim.ugens.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class LNZ extends PApplet {







Global global;

InterfaceLNZ menu;

 public void setup() {
  /* size commented out by preprocessor */;
  surface.setSize(Constants.initialInterface_size, Constants.initialInterface_size);
  surface.setLocation(PApplet.parseInt(0.5f * (displayWidth - Constants.initialInterface_size)),
    PApplet.parseInt(0.5f * (displayHeight - Constants.initialInterface_size)));
  frameRate(Constants.maxFPS);
  global = new Global(this);
  menu = new InitialInterface();
}

 public void draw() {
  int timeElapsed = global.frame();
  // FPS counter
  global.timer_FPS -= timeElapsed;
  if (global.timer_FPS < 0) {
    global.timer_FPS = Constants.frameUpdateTime;
    global.lastFPS = (Constants.frameAverageCache * global.lastFPS + PApplet.parseFloat(frameCount - global.frameCounter) *
      (1000.0f / Constants.frameUpdateTime)) / (Constants.frameAverageCache + 1);
    global.frameCounter = frameCount + 1;
    //println(int(global.lastFPS) + " FPS");
  }
  // Program
  if (menu != null) {
    menu.update();
  }
  switch(global.state) {
    case INITIAL_INTERFACE:
      break;
    case EXITING:
      global.timer_exiting -= timeElapsed;
      if (global.timer_exiting < 0) {
        exit();
      }
      break;
    default:
      break;
  }
}

 public void mouseDragged() {
  menu.mouseMove(mouseX, mouseY);
}
 public void mouseMoved() {
  menu.mouseMove(mouseX, mouseY);
}

 public void mousePressed() {
  menu.mousePress();
}

 public void mouseReleased() {
  menu.mouseRelease();
}
static class Constants {

  // Program constants
  static final String credits =
  "Liberal Nazi Zombies" +
  "20220301: v0.6.0j" +
  "Created by Daniel Gray" +
  "";
  static final int frameUpdateTime = 100;
  static final int frameAverageCache = 5;
  static final int maxFPS = 120;
  static final int exit_delay = 300;

  // Initial Interface
  static final int initialInterface_size = 400;
  static final int initialInterface_buttonWidth = 80;
  static final int initialInterface_buttonGap = 25;

}
class DImg {

  PImage img = null;
  int imgMode = CORNERS;
  int gridX = 0;
  int gridY = 0;

  // Constructor for blank image
  DImg(int x, int y) {
    this.img = createImage(x, y, RGB);
  }
  DImg(PImage img) {
    this.img = img;
  }

   public void mode(int imgMode) {
    switch(imgMode) {
      case CORNERS:
      case CORNER:
      case CENTER:
        this.imgMode = imgMode;
        break;
      default:
        print("ERROR: imgMode invalid");
        break;
    }
  }

   public void setGrid(int x, int y) {
    this.gridX = x;
    this.gridY = y;
  }

  // Display functions
   public void display(float x, float y) {
    imageMode(this.imgMode);
    image(this.img, x, y);
  }
   public void display(float xi, float yi, float xf, float yf) {
    imageMode(this.imgMode);
    image(this.img, xi, yi, xf, yf);
  }

  // Return part of an image
   public PImage getImageSection(PImage img, int x, int y, int w, int h) {
    return img.get(x, y, w, h);
  }

  // Add image to part of this using width / height
   public void addImage(PImage newImg, int x, int y, int w, int h) {
   this.img.copy(newImg, 0, 0, newImg.width, newImg.height, x, y, w, h);
  }
  // Add image to part of this using percent of width / height
   public void addImagePercent(PImage newImg, float xP, float yP, float wP, float hP) {
    if (xP < 0.0f || yP < 0.0f || wP < 0.0f || hP < 0.0f || xP > 1.0f || yP > 1.0f || wP > 1.0f || hP > 1.0f) {
      println("ERROR: addImagePercent coordinates out of range");
      return;
    }
    this.img.copy(newImg, 0, 0, newImg.width, newImg.height,
      round(this.img.width * xP), round(this.img.height * yP),
      round(this.img.width * wP), round(this.img.height * hP));
  }
  // Add image to grid square
   public void addImageGrid(PImage newImg, int x, int y) {
    if (x < 0 || y < 0 || x >= this.gridX || y >= this.gridY) {
      println("ERROR: addImageGrid coordinate out of range");
      return;
    }
    this.img.copy(newImg, 0, 0, newImg.width, newImg.height,
      round(this.img.width * (PApplet.parseFloat(x) / this.gridX)),
      round(this.img.height * (PApplet.parseFloat(y) / this.gridY)),
      this.img.width / this.gridX, this.img.height / this.gridY);
  }
   public void addImageGrid(PImage newImg, int x, int y, int w, int h) {
    if (x < 0 || y < 0 || x >= this.gridX || y >= this.gridY) {
      println("ERROR: addImageGrid coordinate out of range");
      return;
    }
    if (w < 1 || h < 1 || x + w >= this.gridX || y + h >= this.gridY) {
      print("ERROR: addImageGrid coordinate our of range");
      return;
    }
    this.img.copy(newImg, 0, 0, newImg.width, newImg.height,
      round(this.img.width * (PApplet.parseFloat(x) / this.gridX)),
      round(this.img.height * (PApplet.parseFloat(y) / this.gridY)),
      w * (this.img.width / this.gridX), h * (this.img.height / this.gridY));
  }

  // color pixels
   public void colorPixels(int c) {
    /*float ref_r = c >> 16 & 0xFF;
    float ref_g = c >> 8 & 0xFF;
    float ref_b = c & 0xFF;
    float ref_a = alpha(c);*/
    this.img.loadPixels();
    for (int i = 0; i < this.img.height; i++) {
      for (int j = 0; j < this.img.width; j++) {
        int index = i + this.img.width * j;
        this.img.pixels[index] = c;//color(ref_r, ref_g, ref_b, ref_a);
      }
    }
    this.img.updatePixels();
  }

   public void colorPixel(int x, int y, int c) {
    this.img.loadPixels();
    int index = x + y * this.img.width;
    if (index < 0 || index >= this.img.pixels.length) {
      return;
    }
    this.img.pixels[index] = c;
    this.img.updatePixels();
  }
}
abstract class Button {
  // state
  protected boolean hidden = false;
  protected boolean disabled = false;
  protected boolean hovered = false;
  protected boolean clicked = false;
  // colors
  protected int color_disabled = color(220, 180);
  protected int color_default = color(220);
  protected int color_hover = color(170);
  protected int color_click = color(120);
  protected int color_text = color(0);
  protected int color_stroke = color(0);
  // config
  protected String message = "";
  protected boolean show_message = false;
  protected int text_size = 14;
  protected boolean show_stroke = true;
  protected float stroke_weight = 0.5f;
  protected boolean stay_dehovered = false;

  Button() {
  }

   public void setColors(int c_dis, int c_def, int c_hov, int c_cli, int c_tex) {
    this.color_disabled = c_dis;
    this.color_default = c_def;
    this.color_hover = c_hov;
    this.color_click = c_cli;
    this.color_text = c_tex;
  }

   public void setStroke(int c_str, float stroke_weight) {
    this.color_stroke = c_str;
    this.stroke_weight = stroke_weight;
    this.show_stroke = true;
  }
   public void noStroke() {
    this.show_stroke = false;
  }

   public int fillColor() {
    if (this.disabled) {
      return this.color_disabled;
    }
    else if (this.clicked) {
      return this.color_click;
    }
    else if (this.hovered) {
      return this.color_hover;
    }
    else {
      return this.color_default;
    }
  }

   public void setFill() {
    fill(this.fillColor());
    if (this.show_stroke) {
      stroke(this.color_stroke);
      strokeWeight(this.stroke_weight);
    }
    else {
      strokeWeight(0);
      noStroke();
    }
  }

   public void writeText() {
    if (this.show_message) {
      fill(this.color_text);
      textAlign(CENTER, CENTER);
      textSize(this.text_size);
      text(this.message, this.xCenter(), this.yCenter());
    }
  }


   public void stayDehovered() {
    this.stay_dehovered = true;
    this.hovered = false;
  }

   public void update() {
    if (!this.hidden) {
      drawButton();
    }
  }

   public void mouseMove(float mX, float mY) {
    if (this.disabled) {
      return;
    }
    boolean prev_hover = this.hovered;
    this.hovered = this.mouseOn(mX, mY);
    if (this.stay_dehovered) {
      if (this.hovered) {
        this.hovered = false;
      }
      else {
        this.stay_dehovered = false;
      }
    }
    if (prev_hover && !this.hovered) {
      this.dehover();
    }
    else if (!prev_hover && this.hovered) {
      this.hover();
    }
  }

   public void mousePress() {
    if (this.disabled) {
      return;
    }
    if (this.hovered) {
      this.clicked = true;
      this.click();
    }
    else {
      this.clicked = false;
    }
  }

   public void mouseRelease() {
    if (this.disabled) {
      return;
    }
    if (this.clicked) {
      this.clicked = false;
      this.release();
    }
    this.clicked = false;
  }

   public abstract float xCenter();
   public abstract float yCenter();
   public abstract float button_width();
   public abstract float button_height();
   public abstract void drawButton();
   public abstract void moveButton(float xMove, float yMove);
   public abstract boolean mouseOn(float mX, float mY);
   public abstract void hover();
   public abstract void dehover();
   public abstract void click();
   public abstract void release();
}



abstract class RectangleButton extends Button {
  protected float xi;
  protected float yi;
  protected float xf;
  protected float yf;
  protected int roundness = 8;
  protected float xCenter;
  protected float yCenter;

  RectangleButton(float xi, float yi, float xf, float yf) {
    super();
    this.xi = xi;
    this.yi = yi;
    this.xf = xf;
    this.yf = yf;
    this.xCenter = this.xi + 0.5f * (this.xf - this.xi);
    this.yCenter = this.yi + 0.5f * (this.yf - this.yi);
  }

   public float xCenter() {
    return this.xCenter;
  }

   public float yCenter() {
    return this.yCenter;
  }

   public float button_width() {
    return this.xf - this.xi;
  }

   public float button_height() {
    return this.yf - this.yi;
  }

   public void drawButton() {
    this.setFill();
    rectMode(CORNERS);
    if (this.show_message)
    rect(this.xi, this.yi, this.xf, this.yf, this.roundness);
    this.writeText();
  }

   public void moveButton(float xMove, float yMove) {
    this.xi += xMove;
    this.yi += yMove;
    this.xf += xMove;
    this.yf += yMove;
  }

   public boolean mouseOn(float mX, float mY) {
    if (mX >= this.xi && mY >= this.yi &&
      mX <= this.xf && mY <= this.yf) {
      return true;
    }
    return false;
  }
}


abstract class ImageButton extends RectangleButton {
  protected PImage img;
  protected int color_tint = color(255);

  ImageButton(PImage img, float xi, float yi, float xf, float yf) {
    super(xi, yi, xf, yf);
    this.img = img;
  }

  @Override public 
  void drawButton() {
    tint(this.color_tint);
    imageMode(CORNERS);
    image(this.img, this.xi, this.yi, this.xf, this.yf);
    noTint();
    super.drawButton();
  }
}


abstract class RippleRectangleButton extends ImageButton {
  class Pixel {
    private int x;
    private int y;
    private float x_pixel;
    private float y_pixel;
    Pixel(int x, int y, float x_pixel, float y_pixel) {
      this.x = x;
      this.y = y;
      this.x_pixel = x_pixel;
      this.y_pixel = y_pixel;
    }
     public float distance(float mX, float mY) {
      return sqrt((mX - this.x_pixel) * (mX - this.x_pixel) +
        (mY - this.y_pixel) * (mY - this.y_pixel));
    }
  }

  protected int rippleTime = 250;
  protected int rippleTimer = 0;
  protected int lastUpdateTime = millis();
  protected int number_buckets = 50;
  protected HashMap<Integer, ArrayList<Pixel>> buckets;
  protected float clickX = 0;
  protected float clickY = 0;
  protected float maxRippleDistance;

  RippleRectangleButton(float xi, float yi, float xf, float yf) {
    super(createImage(PApplet.parseInt(xf - xi), PApplet.parseInt(yf - yi), RGB), xi, yi, xf, yf);
    this.refreshColor();
    this.maxRippleDistance = max(this.button_width(), this.button_height());
  }

  @Override public 
  void update() {
    super.update();
    int timeElapsed = millis() - this.lastUpdateTime;
    this.lastUpdateTime = millis();
    if (this.rippleTimer > 0) {
      this.rippleTimer -= timeElapsed;
      if (this.rippleTimer <= 0) {
        this.refreshColor();
      }
      else {
        this.colorPixels();
      }
    }
  }

  @Override public 
  void drawButton() {
    tint(this.color_tint);
    imageMode(CORNERS);
    image(this.img, this.xi, this.yi, this.xf, this.yf);
    noTint();
  }

   public void refreshColor() {
    DImg dimg = new DImg(this.img);
    dimg.colorPixels(this.fillColor());
    this.img = dimg.img;
    this.rippleTimer = 0;
  }

   public void initializeRipple() {
    this.buckets = new HashMap<Integer, ArrayList<Pixel>>();
    for (int i = 0; i < this.number_buckets; i++) {
      this.buckets.put(i, new ArrayList<Pixel>());
    }
    float keyMultiplier = PApplet.parseFloat(this.rippleTime) / this.number_buckets;
    for (int i = 0; i < this.img.height; i++) {
      for (int j = 0; j < this.img.width; j++) {
        float x = this.xi + this.button_width() * j / this.img.width;
        float y = this.yi + this.button_height() * i / this.img.height;
        Pixel p = new Pixel(j, i, x, y);
        float distance = p.distance(this.clickX, this.clickY);
        int timer = PApplet.parseInt(floor(this.rippleTime * (1 - distance / this.maxRippleDistance) / keyMultiplier));
        if (this.buckets.containsKey(timer)) {
          this.buckets.get(timer).add(p);
        }
      }
    }
    this.rippleTimer = this.rippleTime;
  }

   public void colorPixels() {
    DImg dimg = new DImg(this.img);
    float currDistance = this.maxRippleDistance * (this.rippleTime - this.rippleTimer) / this.rippleTime;
    float keyMultiplier = PApplet.parseFloat(this.rippleTime) / this.number_buckets;
    for (Map.Entry<Integer, ArrayList<Pixel>> entry : this.buckets.entrySet()) {
      if (entry.getKey() * keyMultiplier > this.rippleTimer) {
        for (Pixel p : entry.getValue()) {
          dimg.colorPixel(p.x, p.y, this.color_click);
        }
        entry.getValue().clear();
      }
    }
  }

   public void hover() {
    this.refreshColor();
  }

   public void dehover() {
    this.refreshColor();
  }

   public void click() {
    this.clickX = mouseX;
    this.clickY = mouseY;
    this.initializeRipple();
  }

   public void release() {
    this.refreshColor();
  }
}



abstract class EllipseButton extends Button {
  protected float xc;
  protected float yc;
  protected float xr;
  protected float yr;

  EllipseButton(float xc, float yc, float xr, float yr) {
    super();
    this.xc = xc;
    this.yc = yc;
    this.xr = xr;
    this.yr = yr;
  }

   public float xCenter() {
    return this.xc;
  }

   public float yCenter() {
    return this.yc;
  }

   public float button_width() {
    return 2 * this.xr;
  }

   public float button_height() {
    return 2 * this.yr;
  }

   public void drawButton() {
    this.setFill();
    ellipseMode(RADIUS);
    ellipse(this.xc, this.yc, this.xr, this.yr);
    this.writeText();
  }

   public void moveButton(float xMove, float yMove) {
    this.xc += xMove;
    this.yc += yMove;
  }

   public boolean mouseOn(float mX, float mY) {
    if (this.xr == 0 || this.yr == 0) {
      return false;
    }
    float xRatio = (mX - this.xc) / this.xr;
    float yRatio = (mY - this.yc) / this.yr;
    if (xRatio * xRatio + yRatio * yRatio <= 1) {
      return true;
    }
    return false;
  }
}



abstract class CircleButton extends EllipseButton {
  CircleButton(float xc, float yc, float r) {
    super(xc, yc, r, r);
  }
}



abstract class TriangleButton extends Button {
  protected float x1;
  protected float y1;
  protected float x2;
  protected float y2;
  protected float x3;
  protected float y3;
  protected float dotvv;
  protected float dotuu;
  protected float dotvu;
  protected float constant;
  protected float xCenter;
  protected float yCenter;

  TriangleButton(float x1, float y1, float x2, float y2, float x3, float y3) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    this.x3 = x3;
    this.y3 = y3;
    this.dotvv = (x3 - x1) * (x3 - x1) + (y3 - y1) * (y3 - y1);
    this.dotuu = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
    this.dotvu = (x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1);
    this.constant = this.dotvv * this.dotuu - this.dotvu * this.dotvu;
    this.xCenter = (x1 + x2 + x3) / 3.0f;
    this.yCenter = (y1 + y2 + y3) / 3.0f;
  }

   public float xCenter() {
    return this.xCenter;
  }

   public float yCenter() {
    return this.yCenter;
  }

   public void drawButton() {
    this.setFill();
    triangle(this.x1, this.y1, this.x2, this.y2, this.x3, this.y3);
    this.writeText();
  }

   public void moveButton(float xMove, float yMove) {
    this.x1 += xMove;
    this.y1 += yMove;
    this.x2 += xMove;
    this.y2 += yMove;
    this.x3 += xMove;
    this.y3 += yMove;
  }

   public boolean mouseOn(float mX, float mY) {
    float dotvp = (this.x3 - this.x1) * (mX - this.x1) + (this.y3 - this.y1) * (mY - this.y1);
    float dotup = (this.x2 - this.y1) * (mX - this.x1) + (this.y2 - this.y1) * (mY - this.y1);
    if (this.constant == 0) {
      return false;
    }
    float t1 = (this.dotuu * dotvp - this.dotvu * dotup) / this.constant;
    float t2 = (this.dotvv * dotup - this.dotvu * dotvp) / this.constant;
    println(t1, t2);
    if (t1 >= 0 && t2 >= 0 && t1 + t2 < 1) {
      return true;
    }
    return false;
  }
}
enum ProgramState {
  INITIAL_INTERFACE, EXITING;
}

class Global {
  // FPS
  private float lastFPS = Constants.maxFPS;
  private int frameCounter = frameCount;
  private int timer_FPS = Constants.frameUpdateTime;
  // Program
  private int lastFrameTime = millis();
  private ProgramState state = ProgramState.INITIAL_INTERFACE;
  private int timer_exiting = Constants.exit_delay;
  private Images images;
  private Sounds sounds;

  Global(LNZ thisInstance) {
    this.images = new Images();
    this.sounds = new Sounds(thisInstance);
  }

   public int frame() {
    int elapsed = millis() - this.lastFrameTime;
    this.lastFrameTime = millis();
    return elapsed;
  }

   public void exit() {
    this.state = ProgramState.EXITING;
  }
}
class Images {
  private HashMap<String, PImage> imgs = new HashMap<String, PImage>();
  private String basePath = sketchPath("data/images/");

  Images() {}

   public PImage getImage(String filePath) {
    if (this.imgs.containsKey(filePath)) {
      return this.imgs.get(filePath);
    }
    else {
      PImage img = loadImage(this.basePath + filePath);
      if (img == null) {
        println("ERROR: Missing image " + filePath + ".");
        return this.getBlackPixel();
      }
      else {
        this.imgs.put(filePath, img);
        return img;
      }
    }
  }

   public PImage getBlackPixel() {
    PImage img = new PImage(1, 1, RGB);
    img.loadPixels();
    img.pixels[0] = color(0);
    img.updatePixels();
    return img;
  }

   public PImage getTransparentPixel() {
    PImage img = new PImage(1, 1, RGB);
    img.loadPixels();
    img.pixels[0] = color(255, 1);
    img.updatePixels();
    return img;
  }
}
abstract class InterfaceLNZ {
  InterfaceLNZ() {
  }

   public abstract void update();
   public abstract void mouseMove(float mX, float mY);
   public abstract void mousePress();
   public abstract void mouseRelease();
}

class InitialInterface extends InterfaceLNZ {

  abstract class InitialInterfaceButton extends RectangleButton {
    InitialInterfaceButton(float xi, float yi, float xf, float yf) {
      super(xi, yi, xf, yf);
      this.setColors(color(0, 100, 30, 200), color(0, 129, 50, 150), color(0, 129, 50, 190), color(0, 129, 50, 230), color(255));
      this.noStroke();
      this.show_message = true;
      this.text_size = 15;
    }

     public void hover() {
      global.sounds.trigger("interfaces/buttonOn1");
      InitialInterface.this.logo.release();
    }
     public void dehover() {
      this.clicked = false;
    }
     public void click() {
      InitialInterface.this.logo.release();
    }
     public void release() {
      this.stayDehovered();
      InitialInterface.this.logo.release();
      InitialInterface.this.logo.release();
    }
  }

  class InitialInterfaceButton1 extends InitialInterfaceButton {
    InitialInterfaceButton1(float buttonHeight) {
      super(width - Constants.initialInterface_buttonWidth - Constants.initialInterface_buttonGap,
        Constants.initialInterface_buttonGap,
        width - Constants.initialInterface_buttonGap,
        Constants.initialInterface_buttonGap + buttonHeight);
      this.message = "Launch";
    }

    @Override public 
    void release() {
      global.sounds.trigger("interfaces/buttonClick4");
    }
  }

  class InitialInterfaceButton2 extends InitialInterfaceButton {
    InitialInterfaceButton2(float buttonHeight) {
      super(width - Constants.initialInterface_buttonWidth - Constants.initialInterface_buttonGap,
        2 * Constants.initialInterface_buttonGap + buttonHeight,
        width - Constants.initialInterface_buttonGap,
        2 * Constants.initialInterface_buttonGap + 2 * buttonHeight);
      this.message = "Uninstall";
    }

    @Override public 
    void release() {
      global.sounds.trigger("interfaces/buttonClick3");
    }
  }

  class InitialInterfaceButton3 extends InitialInterfaceButton {
    InitialInterfaceButton3(float buttonHeight) {
      super(width - Constants.initialInterface_buttonWidth - Constants.initialInterface_buttonGap,
        3 * Constants.initialInterface_buttonGap + 2 * buttonHeight,
        width - Constants.initialInterface_buttonGap,
        3 * Constants.initialInterface_buttonGap + 3 * buttonHeight);
      this.message = "Reset\nGame";
    }

    @Override public 
    void release() {
      global.sounds.trigger("interfaces/buttonClick3");
    }
  }

  class InitialInterfaceButton4 extends InitialInterfaceButton {
    InitialInterfaceButton4(float buttonHeight) {
      super(width - Constants.initialInterface_buttonWidth - Constants.initialInterface_buttonGap,
        4 * Constants.initialInterface_buttonGap + 3 * buttonHeight,
        width - Constants.initialInterface_buttonGap,
        4 * Constants.initialInterface_buttonGap + 4 * buttonHeight);
      this.message = "Version\nHistory";
    }

    @Override public 
    void release() {
      global.sounds.trigger("interfaces/buttonClick3");
    }
  }

  class InitialInterfaceButton5 extends InitialInterfaceButton {
    InitialInterfaceButton5(float buttonHeight) {
      super(width - Constants.initialInterface_buttonWidth - Constants.initialInterface_buttonGap,
        5 * Constants.initialInterface_buttonGap + 4 * buttonHeight,
        width - Constants.initialInterface_buttonGap,
        5 * Constants.initialInterface_buttonGap + 5 * buttonHeight);
      this.message = "Exit";
    }

    @Override public 
    void release() {
      global.sounds.trigger("interfaces/buttonClick3");
      super.release();
      global.exit();
    }
  }

  class LogoImageButton extends ImageButton {
    LogoImageButton() {
      super(global.images.getImage("logo.png"), 0, 0, 400, 400);
    }

     public void hover() {
    }
     public void dehover() {
    }
     public void click() {
      this.color_tint = color(255, 200, 200);
    }
     public void release() {
      this.color_tint = color(255);
    }
  }

  private InitialInterfaceButton[] buttons = new InitialInterfaceButton[5];
  private LogoImageButton logo = new LogoImageButton();

  InitialInterface() {
    super();
    float buttonHeight = (Constants.initialInterface_size - (this.buttons.length + 1) *
      Constants.initialInterface_buttonGap) / this.buttons.length;
    this.buttons[0] = new InitialInterfaceButton1(buttonHeight);
    this.buttons[1] = new InitialInterfaceButton2(buttonHeight);
    this.buttons[2] = new InitialInterfaceButton3(buttonHeight);
    this.buttons[3] = new InitialInterfaceButton4(buttonHeight);
    this.buttons[4] = new InitialInterfaceButton5(buttonHeight);
  }

   public void update() {
    this.logo.update();
    for (InitialInterfaceButton button : this.buttons) {
      button.update();
    }
  }

   public void mouseMove(float mX, float mY) {
    this.logo.mouseMove(mX, mY);
    for (InitialInterfaceButton button : this.buttons) {
      button.mouseMove(mX, mY);
    }
  }

   public void mousePress() {
    this.logo.mousePress();
    for (InitialInterfaceButton button : this.buttons) {
      button.mousePress();
    }
  }

   public void mouseRelease() {
    this.logo.mouseRelease();
    for (InitialInterfaceButton button : this.buttons) {
      button.mouseRelease();
    }
  }
}


class Sounds {
  private Minim minim;
  private AudioOutput out;
  private HashMap<String, Sampler> soundEffects = new HashMap<String, Sampler>();
  private String basePath = sketchPath("data/sounds/");

  Sounds(LNZ thisInstance) {
    this.minim = new Minim(thisInstance);
    this.out = this.minim.getLineOut();
  }

   public void trigger(String soundPath) {
    if (this.soundEffects.containsKey(soundPath)) {
      this.soundEffects.get(soundPath).trigger();
    }
    else {
      String filePath = this.basePath + soundPath + ".wav";
      File f = new File(filePath);
      if (f.exists()) {
        Sampler s = new Sampler(filePath, 2, this.minim);
        s.patch(this.out);
        this.soundEffects.put(soundPath, s);
        s.trigger();
      }
      else {
        println("ERROR: Missing sound " + filePath + ".");
      }
    }
  }
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "LNZ" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
